[{"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\index.jsx":"1","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\i18n.js":"2","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\routes.jsx":"3","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\components\\Common\\Notify.jsx":"4","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\index.js":"5","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Dashboard\\index.js":"6","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Utility\\pages-404.js":"7","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\actions.js":"8","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Authentication\\Login.jsx":"9","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Authentication\\UserProfile.jsx":"10","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Authentication\\Register.jsx":"11","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Authentication\\ForgetPassword.jsx":"12","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Authentication\\PasswordRecovery.jsx":"13","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Channels\\GettingStarted.jsx":"14","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Channels\\ChannelSettings.jsx":"15","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Channels\\CreateChannel.jsx":"16","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\reducers.js":"17","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\sagas\\index.js":"18","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\components\\HorizontalLayout\\index.js":"19","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Dashboard\\WelcomeComp.js":"20","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Dashboard\\ActivityComp.js":"21","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Dashboard\\MonthlyEarning.js":"22","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Dashboard\\StackedColumnChart.js":"23","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Dashboard\\TopCities.js":"24","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Dashboard\\LatestTranaction.js":"25","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Dashboard\\SocialSource.js":"26","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\components\\Common\\Breadcrumb.js":"27","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\common\\actions.js":"28","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\authorization\\actions.js":"29","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\channels\\actions.js":"30","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\profile\\actions.js":"31","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\playlists\\actions.js":"32","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\videos\\actions.js":"33","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\languages\\actions.js":"34","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\layout\\actions.js":"35","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\selectors\\index.js":"36","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\helpers\\validation.js":"37","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\layout\\reducer.js":"38","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\sagas\\languages.js":"39","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\sagas\\videos.js":"40","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\sagas\\channels.js":"41","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\sagas\\playlists.js":"42","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\sagas\\authorization.js":"43","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\sagas\\profile.js":"44","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\layout\\saga.js":"45","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Channels\\DeleteChannelDialog.jsx":"46","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\TabButton\\TabButton.jsx":"47","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\components\\HorizontalLayout\\Footer.js":"48","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\components\\HorizontalLayout\\Navbar.js":"49","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\components\\CommonForBoth\\Rightbar.js":"50","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Dashboard\\ApexRadial.js":"51","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\components\\HorizontalLayout\\Header.jsx":"52","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\languages\\index.js":"53","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\layout\\actionTypes.js":"54","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\playlists\\index.js":"55","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\channels\\index.js":"56","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\videos\\index.js":"57","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\profile\\index.js":"58","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\common\\index.js":"59","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\authorization\\index.js":"60","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\selectors\\authorization\\index.js":"61","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\selectors\\profile\\index.js":"62","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\selectors\\common\\index.js":"63","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\selectors\\languages\\index.js":"64","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\selectors\\videos\\index.js":"65","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\selectors\\playlists\\index.js":"66","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\selectors\\channels\\index.js":"67","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\helpers\\api\\index.js":"68","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\components\\CommonForBoth\\TopbarDropdown\\LanguageDropdown.js":"69","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\components\\CommonForBoth\\TopbarDropdown\\ProfileMenu.jsx":"70","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\helpers\\sha1.js":"71","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\helpers\\api\\videos.js":"72","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\helpers\\api\\languages.js":"73","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\helpers\\api\\playlists.js":"74","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\helpers\\api\\profile.js":"75","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\helpers\\api\\channels.js":"76","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\helpers\\api\\authorization.js":"77","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\helpers\\loader.js":"78","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\Content.jsx":"79","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\TabPanel\\TabPanel.jsx":"80","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\TabPanel\\Upload\\Upload.jsx":"81","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\TabPanel\\ButtonsAPI\\ButtonsAPIVideo.jsx":"82","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\TabPanel\\ButtonsAPI\\ButtonsAPIPlaylist.jsx":"83","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\TabPanel\\EmptyMessage\\EmptyMessage.jsx":"84","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\TabPanel\\DeleteModal\\DeleteModal.jsx":"85","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\TabPanel\\CreateEdit\\CreateEdit.jsx":"86","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\TabPanel\\CheckItems\\CheckItems.jsx":"87","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\TabPanel\\Pagination\\Pagination.jsx":"88","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\TabPanel\\CreateEdit\\FormaData\\FormaData.jsx":"89","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\TabPanel\\CreateEdit\\MetaForma\\MetaForma.jsx":"90","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\TabPanel\\CreateEdit\\LanguagesTabs\\LanguagesTabs.jsx":"91"},{"size":386,"mtime":1610371208775,"results":"92","hashOfConfig":"93"},{"size":1127,"mtime":1609424463073,"results":"94","hashOfConfig":"93"},{"size":2832,"mtime":1611760127821,"results":"95","hashOfConfig":"93"},{"size":1675,"mtime":1609424463059,"results":"96","hashOfConfig":"93"},{"size":478,"mtime":1609402247665,"results":"97","hashOfConfig":"93"},{"size":6582,"mtime":1613153150995,"results":"98","hashOfConfig":"93"},{"size":1626,"mtime":1609424463097,"results":"99","hashOfConfig":"93"},{"size":457,"mtime":1609413847736,"results":"100","hashOfConfig":"93"},{"size":3979,"mtime":1609424463078,"results":"101","hashOfConfig":"93"},{"size":3090,"mtime":1609424463079,"results":"102","hashOfConfig":"93"},{"size":4993,"mtime":1609424463079,"results":"103","hashOfConfig":"93"},{"size":3978,"mtime":1609424463077,"results":"104","hashOfConfig":"93"},{"size":4462,"mtime":1609424463078,"results":"105","hashOfConfig":"93"},{"size":4158,"mtime":1609402247641,"results":"106","hashOfConfig":"93"},{"size":10482,"mtime":1613564333887,"results":"107","hashOfConfig":"93"},{"size":2905,"mtime":1609402247640,"results":"108","hashOfConfig":"93"},{"size":527,"mtime":1609413715627,"results":"109","hashOfConfig":"93"},{"size":3532,"mtime":1613559541641,"results":"110","hashOfConfig":"93"},{"size":2980,"mtime":1609424463065,"results":"111","hashOfConfig":"93"},{"size":2911,"mtime":1609424463095,"results":"112","hashOfConfig":"93"},{"size":4787,"mtime":1609424463091,"results":"113","hashOfConfig":"93"},{"size":1564,"mtime":1609424463093,"results":"114","hashOfConfig":"93"},{"size":1978,"mtime":1609424463094,"results":"115","hashOfConfig":"93"},{"size":3136,"mtime":1609424463094,"results":"116","hashOfConfig":"93"},{"size":5920,"mtime":1609424463093,"results":"117","hashOfConfig":"93"},{"size":3023,"mtime":1609424463094,"results":"118","hashOfConfig":"93"},{"size":1007,"mtime":1609424463058,"results":"119","hashOfConfig":"93"},{"size":482,"mtime":1609752868214,"results":"120","hashOfConfig":"93"},{"size":2145,"mtime":1610463255801,"results":"121","hashOfConfig":"93"},{"size":1240,"mtime":1609402247664,"results":"122","hashOfConfig":"93"},{"size":798,"mtime":1609402247669,"results":"123","hashOfConfig":"93"},{"size":1931,"mtime":1613559361505,"results":"124","hashOfConfig":"93"},{"size":2179,"mtime":1613462825324,"results":"125","hashOfConfig":"93"},{"size":1262,"mtime":1611246874832,"results":"126","hashOfConfig":"93"},{"size":1176,"mtime":1609402247667,"results":"127","hashOfConfig":"93"},{"size":376,"mtime":1609413447823,"results":"128","hashOfConfig":"93"},{"size":156,"mtime":1609402247632,"results":"129","hashOfConfig":"93"},{"size":1533,"mtime":1609402247667,"results":"130","hashOfConfig":"93"},{"size":1963,"mtime":1611247354044,"results":"131","hashOfConfig":"93"},{"size":3820,"mtime":1613462371812,"results":"132","hashOfConfig":"93"},{"size":2594,"mtime":1609402247657,"results":"133","hashOfConfig":"93"},{"size":3996,"mtime":1613564801788,"results":"134","hashOfConfig":"93"},{"size":2280,"mtime":1609402247657,"results":"135","hashOfConfig":"93"},{"size":1252,"mtime":1609402247658,"results":"136","hashOfConfig":"93"},{"size":4350,"mtime":1609402247668,"results":"137","hashOfConfig":"93"},{"size":1248,"mtime":1612514647373,"results":"138","hashOfConfig":"93"},{"size":1474,"mtime":1613117889705,"results":"139","hashOfConfig":"93"},{"size":493,"mtime":1609424463063,"results":"140","hashOfConfig":"93"},{"size":19584,"mtime":1613210187566,"results":"141","hashOfConfig":"93"},{"size":11001,"mtime":1609424463060,"results":"142","hashOfConfig":"93"},{"size":1975,"mtime":1609424463092,"results":"143","hashOfConfig":"93"},{"size":8506,"mtime":1613558436923,"results":"144","hashOfConfig":"93"},{"size":690,"mtime":1611249017842,"results":"145","hashOfConfig":"93"},{"size":578,"mtime":1609402247667,"results":"146","hashOfConfig":"93"},{"size":845,"mtime":1613559407367,"results":"147","hashOfConfig":"93"},{"size":737,"mtime":1609402247665,"results":"148","hashOfConfig":"93"},{"size":937,"mtime":1611914549898,"results":"149","hashOfConfig":"93"},{"size":471,"mtime":1609402247669,"results":"150","hashOfConfig":"93"},{"size":671,"mtime":1609866176987,"results":"151","hashOfConfig":"93"},{"size":583,"mtime":1609402247664,"results":"152","hashOfConfig":"93"},{"size":286,"mtime":1609402247660,"results":"153","hashOfConfig":"93"},{"size":262,"mtime":1609402247662,"results":"154","hashOfConfig":"93"},{"size":624,"mtime":1609753020699,"results":"155","hashOfConfig":"93"},{"size":394,"mtime":1611249009791,"results":"156","hashOfConfig":"93"},{"size":673,"mtime":1611915445253,"results":"157","hashOfConfig":"93"},{"size":547,"mtime":1613559446347,"results":"158","hashOfConfig":"93"},{"size":491,"mtime":1609402247660,"results":"159","hashOfConfig":"93"},{"size":496,"mtime":1609409755465,"results":"160","hashOfConfig":"93"},{"size":3525,"mtime":1609424463060,"results":"161","hashOfConfig":"93"},{"size":2680,"mtime":1613208328558,"results":"162","hashOfConfig":"93"},{"size":3993,"mtime":1609402247631,"results":"163","hashOfConfig":"93"},{"size":6781,"mtime":1613563389477,"results":"164","hashOfConfig":"93"},{"size":2637,"mtime":1611675966192,"results":"165","hashOfConfig":"93"},{"size":5610,"mtime":1613571240342,"results":"166","hashOfConfig":"93"},{"size":1883,"mtime":1609402247631,"results":"167","hashOfConfig":"93"},{"size":3655,"mtime":1609755050123,"results":"168","hashOfConfig":"93"},{"size":1658,"mtime":1609402247629,"results":"169","hashOfConfig":"93"},{"size":266,"mtime":1611671041883,"results":"170","hashOfConfig":"93"},{"size":18241,"mtime":1613577687016,"results":"171","hashOfConfig":"93"},{"size":8676,"mtime":1613722869210,"results":"172","hashOfConfig":"93"},{"size":606,"mtime":1612457838703,"results":"173","hashOfConfig":"93"},{"size":3368,"mtime":1613559706668,"results":"174","hashOfConfig":"93"},{"size":1387,"mtime":1612457838671,"results":"175","hashOfConfig":"93"},{"size":1069,"mtime":1612457838697,"results":"176","hashOfConfig":"93"},{"size":2140,"mtime":1612525969650,"results":"177","hashOfConfig":"93"},{"size":7974,"mtime":1613723051498,"results":"178","hashOfConfig":"93"},{"size":8324,"mtime":1613471758957,"results":"179","hashOfConfig":"93"},{"size":1607,"mtime":1613468079055,"results":"180","hashOfConfig":"93"},{"size":2538,"mtime":1613723610753,"results":"181","hashOfConfig":"93"},{"size":2166,"mtime":1612457838691,"results":"182","hashOfConfig":"93"},{"size":4966,"mtime":1613416522464,"results":"183","hashOfConfig":"93"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},"1y7i1hg",{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"186"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"186"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"186"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"186"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"186"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"186"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"186"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"186"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"186"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"186"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"186"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"186"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"186"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"186"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"186"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"186"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"186"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"186"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"186"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"186"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"186"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"186"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"186"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"186"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"186"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374","usedDeprecatedRules":"186"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"383","messages":"384","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"186"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"186"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395","usedDeprecatedRules":"186"},"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\index.jsx",[],["396","397"],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\i18n.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\routes.jsx",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\components\\Common\\Notify.jsx",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\index.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Dashboard\\index.js",["398"],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport StackedColumnChart from \"./StackedColumnChart\";\r\nimport modalimage1 from \"../../assets/images/product/img-7.png\";\r\nimport modalimage2 from \"../../assets/images/product/img-4.png\";\r\nimport WelcomeComp from \"./WelcomeComp\";\r\nimport MonthlyEarning from \"./MonthlyEarning\";\r\nimport SocialSource from \"./SocialSource\";\r\nimport ActivityComp from \"./ActivityComp\";\r\nimport TopCities from \"./TopCities\";\r\nimport LatestTranaction from \"./LatestTranaction\";\r\nimport Breadcrumbs from '../../components/Common/Breadcrumb';\r\nimport { withNamespaces } from 'react-i18next';\r\nimport { useLastLocation } from 'react-router-last-location';\r\nimport selectors from '../../selectors';\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n\tContainer,\r\n\tRow,\r\n\tCol,\r\n\tButton,\r\n\tCard,\r\n\tCardBody,\r\n\tCardTitle,\r\n\tModal,\r\n\tModalHeader,\r\n\tModalBody,\r\n\tModalFooter,\r\n\tMedia,\r\n\tTable,\r\n} from \"reactstrap\";\r\n\r\nconst Dashboard = (props) => {\r\n\tconst { channels, history } = props\r\n\tconst [modal, setmodal] = useState(false);\r\n\r\n\tconst reports = [\r\n\t\t{ title: \"Orders\", iconClass: \"bx-copy-alt\", description: \"1,235\" },\r\n\t\t{ title: \"Revenue\", iconClass: \"bx-archive-in\", description: \"$35, 723\" },\r\n\t\t{ title: \"Average Price\", iconClass: \"bx-purchase-tag-alt\", description: \"$16.2\" }\r\n\t];\r\n\tconst email = [\r\n\t\t{ title: \"Week\", linkto: \"#\", isActive: false },\r\n\t\t{ title: \"Month\", linkto: \"#\", isActive: false },\r\n\t\t{ title: \"Year\", linkto: \"#\", isActive: true }\r\n\t];\r\n\r\n\tconst lastLocation = useLastLocation()\r\n\tconst lastLoactionPathname = lastLocation?.pathname\r\n\r\n\tuseEffect(()=>{\r\n\t\t\r\n\t\tif ((lastLoactionPathname === '/login' || lastLoactionPathname === '/') && channels?.length === 0) {\r\n\t\t\thistory.push('/channels/create')\r\n\t\t}\r\n\t}, [channels])\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<div className=\"page-content\">\r\n\t\t\t\t<Container fluid>\r\n\r\n\t\t\t\t\t{/* Render Breadcrumb */}\r\n\t\t\t\t\t<Breadcrumbs title={props.t('Dashboard')} breadcrumbItem={props.t('Dashboard')} />\r\n\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<Col xl=\"4\">\r\n\t\t\t\t\t\t\t<WelcomeComp />\r\n\t\t\t\t\t\t\t<MonthlyEarning />\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t<Col xl=\"8\">\r\n\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t{/* Reports Render */}\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treports.map((report, key) =>\r\n\t\t\t\t\t\t\t\t\t\t<Col md=\"4\" key={\"_col_\" + key}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Card className=\"mini-stats-wid\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<CardBody>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Media>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Media body>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-muted font-weight-medium\">{report.title}</p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h4 className=\"mb-0\">{report.description}</h4>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Media>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"mini-stat-icon avatar-sm rounded-circle bg-primary align-self-center\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"avatar-title\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className={\"bx \" + report.iconClass + \" font-size-24\"}></i>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Media>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</CardBody>\r\n\t\t\t\t\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</Row>\r\n\r\n\t\t\t\t\t\t\t<Card>\r\n\t\t\t\t\t\t\t\t<CardBody>\r\n\t\t\t\t\t\t\t\t\t<CardTitle className=\"mb-4 float-sm-left\">\r\n\t\t\t\t\t\t\t\t\t\tEmail Sent\r\n                                        </CardTitle>\r\n\t\t\t\t\t\t\t\t\t<div className=\"float-sm-right\">\r\n\t\t\t\t\t\t\t\t\t\t<ul className=\"nav nav-pills\">\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\temail.map((mail, key) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"nav-item\" key={\"_li_\" + key}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Link className={mail.isActive ? \"nav-link active\" : \"nav-link\"} to={mail.linkto}>{mail.title}</Link>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"clearfix\"></div>\r\n\t\t\t\t\t\t\t\t\t<StackedColumnChart />\r\n\t\t\t\t\t\t\t\t</CardBody>\r\n\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Row>\r\n\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<Col xl=\"4\">\r\n\t\t\t\t\t\t\t<SocialSource />\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t<Col xl=\"4\">\r\n\t\t\t\t\t\t\t<ActivityComp />\r\n\t\t\t\t\t\t</Col>\r\n\r\n\t\t\t\t\t\t<Col xl=\"4\">\r\n\t\t\t\t\t\t\t<TopCities />\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Row>\r\n\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<Col lg=\"12\">\r\n\t\t\t\t\t\t\t<LatestTranaction />\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t</Container>\r\n\t\t\t</div>\r\n\t\t\t<Modal isOpen={modal} role=\"dialog\" autoFocus={true} centered={true} className=\"exampleModal\" tabindex=\"-1\" toggle={() => { setmodal(!modal); }}>\r\n\t\t\t\t<div className=\"modal-content\">\r\n\t\t\t\t\t<ModalHeader toggle={() => { setmodal(!modal); }}>\r\n\t\t\t\t\t\tOrder Details\r\n                        </ModalHeader >\r\n\t\t\t\t\t<ModalBody>\r\n\t\t\t\t\t\t<p className=\"mb-2\">Product id: <span className=\"text-primary\">#SK2540</span></p>\r\n\t\t\t\t\t\t<p className=\"mb-4\">Billing Name: <span className=\"text-primary\">Neal Matthews</span></p>\r\n\r\n\t\t\t\t\t\t<div className=\"table-responsive\">\r\n\t\t\t\t\t\t\t<Table className=\"table table-centered table-nowrap\">\r\n\t\t\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t<th scope=\"col\">Product</th>\r\n\t\t\t\t\t\t\t\t\t\t<th scope=\"col\">Product Name</th>\r\n\t\t\t\t\t\t\t\t\t\t<th scope=\"col\">Price</th>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t<th scope=\"row\">\r\n\t\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<img src={modalimage1} alt=\"\" className=\"avatar-sm\" />\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<h5 className=\"text-truncate font-size-14\">Wireless Headphone (Black)</h5>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-muted mb-0\">$ 225 x 1</p>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t<td>$ 255</td>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t<th scope=\"row\">\r\n\t\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<img src={modalimage2} alt=\"\" className=\"avatar-sm\" />\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<h5 className=\"text-truncate font-size-14\">Hoodie (Blue)</h5>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"text-muted mb-0\">$ 145 x 1</p>\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t<td>$ 145</td>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t<td colspan=\"2\">\r\n\t\t\t\t\t\t\t\t\t\t\t<h6 className=\"m-0 text-right\">Sub Total:</h6>\r\n\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t<td>$ 400</td>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t<td colspan=\"2\">\r\n\t\t\t\t\t\t\t\t\t\t\t<h6 className=\"m-0 text-right\">Shipping:</h6>\r\n\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t<td>Free</td>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t<td colspan=\"2\">\r\n\t\t\t\t\t\t\t\t\t\t\t<h6 className=\"m-0 text-right\">Total:</h6>\r\n\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t<td>$ 400</td>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</ModalBody>\r\n\t\t\t\t\t<ModalFooter>\r\n\t\t\t\t\t\t<Button type=\"button\" color=\"secondary\" onClick={() => { setmodal(!modal); }}>Close</Button>\r\n\t\t\t\t\t</ModalFooter>\r\n\t\t\t\t</div>\r\n\t\t\t</Modal>\r\n\t\t</React.Fragment>\r\n\t);\r\n}\r\n\r\n\r\nconst mapStatetoProps = state => {\r\n\treturn {\r\n\t\tchannels: selectors.channels.channels(state),\r\n\t};\r\n};\r\n\r\nexport default connect(mapStatetoProps)(withNamespaces()(Dashboard));","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Utility\\pages-404.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\actions.js",["399"],"import authorization from './authorization/actions'\r\nimport common from './common/actions'\r\nimport profile from './profile/actions'\r\nimport channels from './channels/actions'\r\nimport playlists from './playlists/actions'\r\nimport videos from './videos/actions'\r\nimport languages from './languages/actions'\r\n\r\nexport * from './layout/actions';\r\n\r\nexport default {\r\n  authorization,\r\n  common,\r\n  profile,\r\n  channels,\r\n  playlists,\r\n  videos,\r\n  languages\r\n}\r\n","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Authentication\\Login.jsx",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Authentication\\UserProfile.jsx",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Authentication\\Register.jsx",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Authentication\\ForgetPassword.jsx",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Authentication\\PasswordRecovery.jsx",["400"],"import React, { useEffect, useState } from 'react';\r\nimport { Row, Col, Alert, Card, CardBody, Container } from \"reactstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter, Link } from \"react-router-dom\";\r\nimport profile from \"../../assets/images/profile-img.png\";\r\nimport logo from \"../../assets/images/logo.svg\";\r\nimport Actions from '../../store/actions'\r\nimport selectors from './../../selectors'\r\n\r\nconst ForgetPasswordPage = React.memo((props) => {\r\n  const { history, onSendNewPassword, successMessage, errorMessage } = props\r\n  const [isSent, setSentStatus] = useState(null)\r\n  const [responseMessage, setResponseMessage] = useState('')\r\n\r\n  const path = history.location.pathname.split('/');\r\n  const hash = path[path.length - 1];\r\n\r\n  useEffect(() => {\r\n    if (hash && isSent === null) {\r\n      onSendNewPassword({\"hash\": hash})\r\n      setSentStatus(true)\r\n    }\r\n\r\n    if (successMessage || errorMessage) {\r\n      setResponseMessage(successMessage || errorMessage)\r\n      setSentStatus(false)\r\n    }\r\n  }, [successMessage, errorMessage])\r\n\r\n  const renderCurrentMessage = () => {\r\n    if (isSent === true) {\r\n      return (\r\n        <div className=\"text-center mb-4\">\r\n          <span className=\"mr-1\">Please wait</span>\r\n          <i className=\"bx bx-loader bx-spin font-size-16 align-middle mr-2\"></i>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (isSent === false) {\r\n      return (\r\n        <div className=\"text-center mb-4\">\r\n          <span className=\"mr-1\">{responseMessage}</span>\r\n        </div>\r\n      )\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"home-btn d-none d-sm-block\">\r\n        <Link to=\"/\" className=\"text-dark\"><i className=\"fas fa-home h2\"></i></Link>\r\n      </div>\r\n      <div className=\"account-pages my-5 pt-sm-5\">\r\n        <Container>\r\n          <Row className=\"justify-content-center\">\r\n            <Col md={8} lg={6} xl={5}>\r\n              <Card className=\"overflow-hidden\">\r\n                <div className=\"bg-soft-primary\">\r\n                  <Row>\r\n                    <Col className=\"col-7\">\r\n                      <div className=\"text-primary p-4\">\r\n                        <h5 className=\"text-primary\">Welcome Back !</h5>\r\n                        <p>Sign in to continue to Bring Stream.</p>\r\n                      </div>\r\n                    </Col>\r\n                    <Col className=\"col-5 align-self-end\">\r\n                      <img src={profile} alt=\"\" className=\"img-fluid\" />\r\n                    </Col>\r\n                  </Row>\r\n                </div>\r\n                <CardBody className=\"pt-0\">\r\n                  <div>\r\n                    <Link to=\"/\">\r\n                      <div className=\"avatar-md profile-user-wid mb-4\">\r\n                        <span className=\"avatar-title rounded-circle bg-light\">\r\n                          <img src={logo} alt=\"\" className=\"rounded-circle\" height=\"34\" />\r\n                        </span>\r\n                      </div>\r\n                    </Link>\r\n                  </div>\r\n                  <div className=\"p-2\">\r\n                    {props.forgetError && props.forgetError ? (\r\n                      <Alert color=\"danger\" style={{ marginTop: \"13px\" }}>\r\n                        {props.forgetError}\r\n                      </Alert>\r\n                    ) : null}\r\n                    {props.forgetSuccessMsg ? (\r\n                      <Alert color=\"success\" style={{ marginTop: \"13px\" }}>\r\n                        {props.forgetSuccessMsg}\r\n                      </Alert>\r\n                    ) : null}\r\n                    {renderCurrentMessage()}\r\n                  </div>\r\n                </CardBody>\r\n              </Card>\r\n              <div className=\"mt-5 text-center\">\r\n                <p> Go back to <Link to=\"/login\" className=\"font-weight-medium text-primary\">Login</Link></p>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n})\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n  errorMessage: selectors.common.errorMessage(state),\r\n  successMessage: selectors.common.successMessage(state),\r\n})\r\n\r\nconst mapDispathcToProps = dispatch => ({\r\n  onForgotPassword: (data) => dispatch(Actions.authorization.forgotPasswordRequest(data)),\r\n  onSendNewPassword: (value) => dispatch(Actions.authorization.sendNewPasswordRequest(value)),\r\n})\r\n\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, mapDispathcToProps)(ForgetPasswordPage)\r\n);\r\n","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Channels\\GettingStarted.jsx",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Channels\\ChannelSettings.jsx",["401"],"import React, { useState, useEffect } from \"react\";\r\nimport classnames from \"classnames\";\r\nimport Breadcrumbs from \"../../components/Common/Breadcrumb\";\r\nimport DeleteChannelDialog from \"./DeleteChannelDialog\";\r\nimport { connect } from \"react-redux\";\r\nimport Actions from \"./../../store/actions\";\r\nimport { Link } from \"react-router-dom\";\r\nimport selectors from \"./../../selectors\";\r\nimport { AvForm, AvField } from \"availity-reactstrap-validation\";\r\nimport { validate } from \"./../../helpers/validation\";\r\nimport {\r\n  TabContent,\r\n  TabPane,\r\n  Nav,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  NavItem,\r\n  NavLink,\r\n  Button,\r\n  Row,\r\n  Col,\r\n  FormGroup,\r\n  Container,\r\n  Label,\r\n  FormText,\r\n} from \"reactstrap\";\r\nimport \"./channels.scss\";\r\nimport { Multiselect } from \"multiselect-react-dropdown\";\r\n\r\nconst ChannelSettings = React.memo((props) => {\r\n  const {\r\n    activeChannel,\r\n    onChannelUpdate,\r\n    onUpdateChannelLanguages,\r\n    channelLanguages,\r\n    onGetChannelLanguages,\r\n    languagesAll,\r\n    getLanguages,\r\n  } = props;\r\n  const [activeTab, setActiveTab] = useState(\"1\");\r\n  const [channelName, setChannelName] = useState(activeChannel?.name || \"\");\r\n  const [channelDomain, setChannelDomain] = useState(\r\n    activeChannel?.domain || \"\"\r\n  );\r\n  const [channelSubDomain, setChannelSubDomain] = useState(\r\n    activeChannel?.subdomain || \"\"\r\n  );\r\n  const [modal, setModal] = useState(false);\r\n  const defaultChannel = JSON.parse(localStorage.getItem(\"channel\"));\r\n\r\n  const onSubmit = () => {\r\n    onChannelUpdate({\r\n      id: activeChannel.id,\r\n      name: channelName,\r\n      domain: channelDomain.replace(/\\s/g, \"\"),\r\n      subdomain: channelSubDomain.replace(/\\s/g, \"\"),\r\n    });\r\n  };\r\n  // Default languages on current channel\r\n  const defaultLang =\r\n    channelLanguages &&\r\n    languagesAll?.filter((l) => channelLanguages[l.id] === 1);\r\n  // Select languages\r\n  const selectLang = (selectedList, selectedItem) => {\r\n    const name = selectedItem.id;\r\n    const all = { ...channelLanguages };\r\n\r\n    all[name] = 1;\r\n\r\n    onUpdateChannelLanguages({ channelId: defaultChannel.id, languages: all });\r\n    setTimeout(() => {\r\n      onGetChannelLanguages(defaultChannel.id);\r\n    }, 1000);\r\n  };\r\n  // Remove languages\r\n  const removeLang = (selectedList, selectedItem) => {\r\n    const name = selectedItem.id;\r\n    const all = { ...channelLanguages };\r\n\r\n    all[name] = 0;\r\n\r\n    onUpdateChannelLanguages({ channelId: defaultChannel.id, languages: all });\r\n    setTimeout(() => {\r\n      onGetChannelLanguages(defaultChannel.id);\r\n    }, 1000);\r\n  };\r\n\r\n  const customValidation = (value) => {\r\n    return validate.isChannelNameValid(value)\r\n      ? true\r\n      : `The field must not contain spaces.`;\r\n  };\r\n\r\n  const customDomainValidation = (value) => {\r\n    if (value) {\r\n      return validate.isChannelNameValid(value)\r\n        ? true\r\n        : `The field must not contain spaces.`;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (activeChannel) {\r\n      setChannelName(activeChannel?.name);\r\n      setChannelDomain(activeChannel?.domain || \"\");\r\n      setChannelSubDomain(activeChannel?.subdomain || \"\");\r\n    }\r\n  }, [activeChannel]);\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const toggleTab = (tab) => {\r\n    if (activeTab !== tab) setActiveTab(tab);\r\n  };\r\n\r\n  const renderChannelSettings = () => {\r\n    return (\r\n      <Row className=\"align-items-start\">\r\n        <Col xs=\"12\" sm=\"4\" md=\"3\" lg=\"2\" className=\"mb-2\">\r\n          <Nav className=\"border-0\" vertical pills tabs>\r\n            <NavItem className=\"bg-white text-center w-100 mx-auto\">\r\n              <NavLink\r\n                className={classnames({ active: activeTab === \"1\" })}\r\n                onClick={() => {\r\n                  toggleTab(\"1\");\r\n                }}\r\n              >\r\n                General\r\n              </NavLink>\r\n            </NavItem>\r\n            <NavItem className=\"bg-white mt-2 text-center w-100 mx-auto\">\r\n              <NavLink\r\n                className={classnames({ active: activeTab === \"2\" })}\r\n                onClick={() => {\r\n                  toggleTab(\"2\");\r\n                }}\r\n              >\r\n                Other\r\n              </NavLink>\r\n            </NavItem>\r\n            <NavItem className=\"mt-2 border-0 w-100\">\r\n              <Button\r\n                outline\r\n                color=\"danger\"\r\n                className=\"d-block w-100 mx-auto\"\r\n                onClick={toggle}\r\n              >\r\n                Delete Project\r\n              </Button>\r\n              <DeleteChannelDialog\r\n                {...{ channelName, modal, setModal, toggle }}\r\n                channelId={activeChannel.id}\r\n              />\r\n            </NavItem>\r\n          </Nav>\r\n        </Col>\r\n        <Col xs=\"12\" sm=\"8\" md=\"9\" lg=\"10\">\r\n          <TabContent activeTab={activeTab}>\r\n            <TabPane tabId=\"1\">\r\n              <AvForm\r\n                onValidSubmit={(e, v) => {\r\n                  onSubmit(e, v);\r\n                }}\r\n              >\r\n                <Card>\r\n                  <CardBody>\r\n                    <div className=\"form-group\">\r\n                      <AvField\r\n                        name=\"name\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Your film, show, company name. You can change this later\"\r\n                        type=\"text\"\r\n                        required\r\n                        label=\"Title\"\r\n                        value={channelName}\r\n                        onChange={(event) => {\r\n                          setChannelName(event.target.value);\r\n                        }}\r\n                        validate={{ customValidation }}\r\n                      />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <AvField\r\n                        name=\"domain\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Channels domain\"\r\n                        type=\"text\"\r\n                        label=\"Domain\"\r\n                        value={channelDomain}\r\n                        onChange={(event) => {\r\n                          setChannelDomain(event.target.value);\r\n                        }}\r\n                        validate={{ customDomainValidation }}\r\n                      />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <AvField\r\n                        name=\"subdomain\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Channels subdomain\"\r\n                        type=\"text\"\r\n                        label=\"Subdomain\"\r\n                        value={channelSubDomain}\r\n                        onChange={(event) => {\r\n                          setChannelSubDomain(event.target.value);\r\n                        }}\r\n                        validate={{ customValidation }}\r\n                      />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                      <Label className=\"m-0 font-weight-bold\">\r\n                        Supported languages\r\n                      </Label>\r\n                      <FormText color=\"muted\">\r\n                        Enable languages so that viewers can see translated\r\n                        content on your website\r\n                      </FormText>\r\n                      {defaultLang && (\r\n                        <Multiselect\r\n                          options={languagesAll}\r\n                          selectedValues={defaultLang || languagesAll[17]}\r\n                          displayValue=\"name\"\r\n                          onSelect={selectLang}\r\n                          onRemove={removeLang}\r\n                          closeIcon=\"cancel\"\r\n                          placeholder=\"Select language\"\r\n                        />\r\n                      )}\r\n                    </div>\r\n                  </CardBody>\r\n                </Card>\r\n                <Row className=\"justify-content-end mt-3\">\r\n                  <FormGroup>\r\n                    <Button className=\"btn-size-130 mr-3\" color=\"secondary\" onClick={() => props.history.push(\"/dashboard\")}>\r\n                      Cancel\r\n                    </Button>\r\n                    <Button\r\n                      className=\"btn-size-130 mr-3\"\r\n                      color=\"primary\"\r\n                      type=\"submit\"\r\n                    >\r\n                      Save\r\n                    </Button>\r\n                  </FormGroup>\r\n                </Row>\r\n              </AvForm>\r\n            </TabPane>\r\n            <TabPane tabId=\"2\">\r\n              <Card>\r\n                <CardBody>Other</CardBody>\r\n              </Card>\r\n            </TabPane>\r\n          </TabContent>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  };\r\n\r\n  const renderEmptyChannlsMessage = () => (\r\n    <div className=\"overlay\">\r\n      <CardBody>\r\n        <CardTitle className=\"text-center mb-3 mt-3\">\r\n          You haven`t any channels yet.\r\n        </CardTitle>\r\n        <div className=\"text-center mb-3\">\r\n          <Link to=\"/channels/create\">\r\n            <Button color=\"primary\" className=\"waves-effect\">\r\n              <i className=\"bx bx-plus font-size-16 align-middle mr-2\" />\r\n              Creacte a new project\r\n            </Button>\r\n          </Link>\r\n        </div>\r\n      </CardBody>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div className=\"page-content\">\r\n        <Container fluid>\r\n          <Breadcrumbs\r\n            title={\"dashboard\"}\r\n            breadcrumbItem={\"channel settings\"}\r\n          />\r\n          {Boolean(activeChannel)\r\n            ? renderChannelSettings()\r\n            : renderEmptyChannlsMessage()}\r\n        </Container>\r\n      </div>\r\n    </>\r\n  );\r\n});\r\n\r\nconst mapStatetoProps = (state) => ({\r\n  activeChannel: selectors.channels.activeChannel(state),\r\n  channelLanguages: selectors.languages.channelLanguages(state),\r\n  languagesAll: selectors.languages.languagesAll(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChannelUpdate: (data) =>\r\n    dispatch(Actions.channels.updateChannelRequest(data)),\r\n  getLanguages: () => dispatch(Actions.languages.getLanguagesRequest()),\r\n  onGetChannelLanguages: (data) =>\r\n    dispatch(Actions.languages.getChannelLanguagesRequest(data)),\r\n  onUpdateChannelLanguages: (data) =>\r\n    dispatch(Actions.languages.updateChannelLanguagesRequest(data)),\r\n});\r\n\r\nexport default connect(mapStatetoProps, mapDispatchToProps)(ChannelSettings);\r\n","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Channels\\CreateChannel.jsx",["402"],"import React, { useEffect, useState } from 'react';\r\nimport { CardBody, CardTitle, Button, Container } from 'reactstrap';\r\nimport Breadcrumbs from '../../components/Common/Breadcrumb';\r\nimport { withNamespaces } from 'react-i18next';\r\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\r\nimport { connect } from 'react-redux';\r\nimport Actions from '../../store/actions'\r\nimport selectors from './../../selectors/index'\r\nimport { validate } from './../../helpers/validation'\r\nimport \"./channels.scss\";\r\n\r\nconst CreateChannel = (props) => {\r\n\t\r\n\tconst { \r\n\t\tonAddChannel, \r\n\t\terrorMessgae, \r\n\t\thistory, \r\n\t\tisChannelAddedSuccessfuly,\r\n\t\tresetIsChannelAddedValue,\r\n\t } = props\r\n\t \r\n\tconst [isSent, setSentStatus] = useState(false)\r\n\r\n\tuseEffect(()=>{\r\n\t\tsetSentStatus(false)\r\n\r\n\t\tif(isChannelAddedSuccessfuly){\r\n\t\t\thistory.push('/channels/getting-started')\r\n\t\t\tresetIsChannelAddedValue()\r\n\t\t}\r\n\t\t\r\n\t}, [errorMessgae, isChannelAddedSuccessfuly])\r\n\r\n\tconst customValidation = value => validate.isChannelNameValid(value) ? true : `The field must not contain spaces.`;\r\n\r\n\tfunction onFormSubmit(event, values) {\r\n\r\n\t\tif(!validate.isChannelNameValid(values.name)) return\r\n\r\n\t\tconst data = {\r\n\t\t\tname: values.name,\r\n\t\t\tsubdomain: values.name.replace(/\\s/g, ''),\r\n\t\t}\r\n\r\n\t\tsetSentStatus(true)\r\n\t\tonAddChannel(data)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"page-content\">\r\n\t\t\t\t<Container fluid>\r\n\t\t\t\t\t<Breadcrumbs\r\n\t\t\t\t\t\ttitle={\"dashboard\"}\r\n\t\t\t\t\t\tbreadcrumbItem={\"create a new project\"}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<div className=\"overlay\">\r\n\t\t\t\t\t\t<div className=\"create-form\">\r\n\t\t\t\t\t\t\t<CardBody>\r\n\t\t\t\t\t\t\t\t<CardTitle className=\"text-center mb-3\">What's the name of your project?</CardTitle>\r\n\t\t\t\t\t\t\t\t<AvForm onValidSubmit={(e, v) => { onFormSubmit(e, v) }}>\r\n\t\t\t\t\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t\t<AvField\r\n\t\t\t\t\t\t\t\t\t\t\tname=\"name\"\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Your film, show, company name. You can change this later\"\r\n\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\t\t\t\tvalidate={{customValidation}}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<Button className=\"mt-1 waves-effect waves-light\" color=\"primary\" type=\"submit\">\r\n\t\t\t\t\t\t\t\t\t\t{isSent && <i className=\"bx bx-loader bx-spin font-size-16 align-middle mr-2\"></i>}\r\n\t\t\t\t\t\t\t\t\t\tCreate Project\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t</AvForm>\r\n\t\t\t\t\t\t\t</CardBody>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Container>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n\terrorMessgae: selectors.common.errorMessage(state),\r\n\tisChannelAddedSuccessfuly: selectors.channels.isChannelAddedSuccessfuly(state),\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n\tonAddChannel: (data) => dispatch(Actions.channels.addChannelRequest(data)),\r\n\tresetIsChannelAddedValue: () => dispatch(Actions.channels.addChannelSucces(false)),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withNamespaces()(CreateChannel));\r\n","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\reducers.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\sagas\\index.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\components\\HorizontalLayout\\index.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Dashboard\\WelcomeComp.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Dashboard\\ActivityComp.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Dashboard\\MonthlyEarning.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Dashboard\\StackedColumnChart.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Dashboard\\TopCities.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Dashboard\\LatestTranaction.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Dashboard\\SocialSource.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\components\\Common\\Breadcrumb.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\common\\actions.js",["403"],"\r\nexport const Types = {\r\n  SET_ERROR_NOTIFY: 'SET_ERROR_NOTIFY',\r\n  SET_SUCCESS_NOTIFY: 'SET_SUCCESS_NOTIFY',\r\n  SET_LOADER: 'SET_LOADER'\r\n}\r\n\r\nconst setErrorNotify = (payload) => ({\r\n  type: Types.SET_ERROR_NOTIFY,\r\n  payload\r\n})\r\n\r\nconst setSuccessNotify = (payload) => ({\r\n  type: Types.SET_SUCCESS_NOTIFY,\r\n  payload\r\n})\r\n\r\nconst setLoader = (payload) => ({\r\n  type: Types.SET_LOADER,\r\n  payload\r\n})\r\n\r\n\r\nexport default {\r\n  setErrorNotify,\r\n  setSuccessNotify,\r\n  setLoader\r\n}","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\authorization\\actions.js",["404"],"export const Types = {\r\n  LOGIN_REQUEST: 'LOGIN_REQUEST',\r\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\r\n  \r\n  REGISTER_USER_REQUEST: 'REGISTER_USER_REQUEST',\r\n  REGISTER_USER_SUCCESS: 'REGISTER_USER_SUCCESS',\r\n  \r\n  FORGOT_PASSWORD_REQUEST: 'FORGOT_PASSWORD_REQUEST',\r\n  FORGOT_PASSWORD_SUCCESS: 'FORGOT_PASSWORD_SUCCESS',\r\n\r\n  SEND_NEW_PASSAWORD_REQUEST: 'SEND_NEW_PASSAWORD_REQUEST',\r\n  SEND_NEW_PASSAWORD_SUCCESS: 'SEND_NEW_PASSAWORD_SUCCESS',\r\n\r\n  LOG_OUT: 'LOG_OUT',\r\n\r\n  GET_USER_PROFILE_REQUEST: 'GET_USER_PROFILE_REQUEST',\r\n  GET_USER_PROFILE_SUCCESS: 'GET_USER_PROFILE_SUCCESS',\r\n  \r\n  CHANGE_USER_PROFILE_REQUEST: 'CHANGE_USER_PROFILE_REQUEST',\r\n  CHANGE_USER_PROFILE_SUCCESS: 'CHANGE_USER_PROFILE_SUCCESS',\r\n}\r\n\r\nconst loginRequest = (payload) => ({\r\n  type: Types.LOGIN_REQUEST,\r\n  payload\r\n})\r\n\r\nconst loginSucces = (payload) => ({\r\n  type: Types.LOGIN_SUCCESS,\r\n  payload\r\n})\r\n\r\nconst registerUserRequest = (payload) => ({\r\n  type: Types.REGISTER_USER_REQUEST,\r\n  payload\r\n})\r\n\r\nconst registerUserSucces = (payload) => ({\r\n  type: Types.REGISTER_USER_SUCCESS,\r\n  payload\r\n})\r\n\r\nconst forgotPasswordRequest = (payload) => ({\r\n  type: Types.FORGOT_PASSWORD_REQUEST,\r\n  payload\r\n})\r\n\r\nconst forgotPasswordSuccess = (payload) => ({\r\n  type: Types.FORGOT_PASSWORD_SUCCESS,\r\n  payload\r\n})\r\n\r\nconst logOut = () => ({\r\n  type: Types.LOG_OUT\r\n})\r\n\r\nconst getUserProfileRequest = () => ({\r\n  type: Types.GET_USER_PROFILE_REQUEST,\r\n})\r\n\r\nconst getUserProfileSucces = (payload) => ({\r\n  type: Types.GET_USER_PROFILE_SUCCESS,\r\n  payload\r\n})\r\n\r\nconst changeUserProfileRequest = (payload) => ({\r\n  type: Types.CHANGE_USER_PROFILE_REQUEST,\r\n  payload\r\n})\r\n\r\nconst changeUserProfileSucces = () => ({\r\n  type: Types.CHANGE_USER_PROFILE_SUCCESS,\r\n})\r\n\r\nconst sendNewPasswordRequest = (payload) => ({\r\n  type: Types.SEND_NEW_PASSAWORD_REQUEST,\r\n  payload\r\n})\r\n\r\n\r\nexport default {\r\n  loginRequest,\r\n  loginSucces,\r\n  registerUserRequest,\r\n  registerUserSucces,\r\n  forgotPasswordRequest,\r\n  forgotPasswordSuccess,\r\n  logOut,\r\n  getUserProfileRequest,\r\n  getUserProfileSucces,\r\n  changeUserProfileRequest,\r\n  changeUserProfileSucces,\r\n  sendNewPasswordRequest,\r\n}","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\channels\\actions.js",["405"],"\r\nexport const Types = {\r\n  ADD_CHANNEL_REQUEST: 'ADD_CHANNEL_REQUEST',\r\n  ADD_CHANNEL_SUCCESS: 'ADD_CHANNEL_SUCCESS',\r\n  \r\n  GET_CHANNELS_REQUEST: 'GET_CHANNELS_REQUEST',\r\n  GET_CHANNELS_SUCCESS: 'GET_CHANNELS_SUCCESS',\r\n  \r\n  SET_ACTIVE_CHANNEL: 'SET_ACTIVE_CHANNEL',\r\n  \r\n  DELETE_CHANNEL_REQUEST: 'DELETE_CHANNEL_REQUEST',\r\n\r\n  UPDATE_CHANNEL_REQUEST: 'UPDATE_CHANNEL_REQUEST',\r\n}\r\n\r\nconst addChannelRequest = (payload) => ({\r\n  type: Types.ADD_CHANNEL_REQUEST,\r\n  payload\r\n})\r\n\r\nconst addChannelSucces = (payload) => ({\r\n  type: Types.ADD_CHANNEL_SUCCESS,\r\n  payload\r\n})\r\n\r\nconst getChannelsRequest = () => ({\r\n  type: Types.GET_CHANNELS_REQUEST,\r\n})\r\n\r\nconst getChannelsSuccess = (payload) => ({\r\n  type: Types.GET_CHANNELS_SUCCESS,\r\n  payload,\r\n})\r\n\r\nconst setActiveChannel = (payload) => ({\r\n  type: Types.SET_ACTIVE_CHANNEL,\r\n  payload,\r\n})\r\n\r\nconst deleteChannelRequest = (payload) => ({\r\n  type: Types.DELETE_CHANNEL_REQUEST,\r\n  payload,\r\n})\r\n\r\nconst updateChannelRequest = (payload) => ({\r\n  type: Types.UPDATE_CHANNEL_REQUEST,\r\n  payload,\r\n})\r\n\r\n\r\nexport default {\r\n  addChannelRequest,\r\n  addChannelSucces,\r\n  getChannelsRequest,\r\n  getChannelsSuccess,\r\n  setActiveChannel,\r\n  deleteChannelRequest,\r\n  updateChannelRequest,\r\n}","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\profile\\actions.js",["406"],"\r\nexport const Types = {\r\n  GET_USER_PROFILE_REQUEST: 'GET_USER_PROFILE_REQUEST',\r\n  GET_USER_PROFILE_SUCCESS: 'GET_USER_PROFILE_SUCCESS',\r\n  \r\n  CHANGE_USER_PROFILE_REQUEST: 'CHANGE_USER_PROFILE_REQUEST',\r\n  CHANGE_USER_PROFILE_SUCCESS: 'CHANGE_USER_PROFILE_SUCCESS',\r\n}\r\n\r\nconst getUserProfileRequest = () => ({\r\n  type: Types.GET_USER_PROFILE_REQUEST,\r\n})\r\n\r\nconst getUserProfileSucces = (payload) => ({\r\n  type: Types.GET_USER_PROFILE_SUCCESS,\r\n  payload\r\n})\r\n\r\nconst changeUserProfileRequest = (payload) => ({\r\n  type: Types.CHANGE_USER_PROFILE_REQUEST,\r\n  payload\r\n})\r\n\r\nconst changeUserProfileSucces = () => ({\r\n  type: Types.CHANGE_USER_PROFILE_SUCCESS,\r\n})\r\n\r\n\r\nexport default {\r\n  getUserProfileRequest,\r\n  getUserProfileSucces,\r\n  changeUserProfileRequest,\r\n  changeUserProfileSucces,\r\n}","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\playlists\\actions.js",["407"],"export const Types = {\r\n  ADD_PLAYLIST_REQUEST: \"ADD_PLAYLIST_REQUEST\",\r\n  ADD_PLAYLIST_SUCCESS: \"ADD_PLAYLIST_SUCCESS\",\r\n\r\n  GET_PLAYLISTS_REQUEST: \"GET_PLAYLISTS_REQUEST\",\r\n  GET_PLAYLISTS_SUCCESS: \"GET_PLAYLISTS_SUCCESS\",\r\n\r\n  GET_ONE_PLAYLIST_REQUEST: \"GET_ONE_PLAYLIST_REQUEST\",\r\n  GET_ONE_PLAYLIST_SUCCESS: \"GET_ONE_PLAYLIST_SUCCESS\",\r\n\r\n  GET_PLAYLISTS_BY_VIDEO_REQUEST: \"GET_PLAYLISTS_BY_VIDEO_REQUEST\",\r\n  GET_PLAYLISTS_BY_VIDEO_SUCCESS: \"GET_PLAYLISTS_BY_VIDEO_SUCCESS\",\r\n\r\n  DELETE_PLAYLIST_REQUEST: \"DELETE_PLAYLIST_REQUEST\",\r\n\r\n  UPDATE_PLAYLIST_REQUEST: \"UPDATE_PLAYLIST_REQUEST\",\r\n};\r\n\r\nconst addPlaylistRequest = (payload) => ({\r\n  type: Types.ADD_PLAYLIST_REQUEST,\r\n  payload,\r\n});\r\n\r\nconst addPlaylistSuccess = () => ({\r\n  type: Types.ADD_PLAYLIST_SUCCESS,\r\n});\r\n\r\nconst getPlaylistsRequest = (payload) => ({\r\n  type: Types.GET_PLAYLISTS_REQUEST,\r\n  payload,\r\n});\r\n\r\nconst getPlaylistsSuccess = (payload) => ({\r\n  type: Types.GET_PLAYLISTS_SUCCESS,\r\n  payload,\r\n});\r\n\r\nconst getPlaylistsByVideoRequest = (payload) => ({\r\n  type: Types.GET_PLAYLISTS_BY_VIDEO_REQUEST,\r\n  payload,\r\n});\r\n\r\nconst getPlaylistsByVideoSuccess = (payload) => ({\r\n  type: Types.GET_PLAYLISTS_BY_VIDEO_SUCCESS,\r\n  payload,\r\n});\r\n\r\nconst getOnePlaylistRequest = (payload) => ({\r\n  type: Types.GET_ONE_PLAYLIST_REQUEST,\r\n  payload,\r\n});\r\n\r\nconst getOnePlaylistSuccess = (payload) => ({\r\n  type: Types.GET_ONE_PLAYLIST_SUCCESS,\r\n  payload,\r\n});\r\n\r\nconst deletePlaylistRequest = (payload) => ({\r\n  type: Types.DELETE_PLAYLIST_REQUEST,\r\n  payload,\r\n});\r\n\r\nconst updatePlaylistRequest = (payload) => ({\r\n  type: Types.UPDATE_PLAYLIST_REQUEST,\r\n  payload,\r\n});\r\n\r\nexport default {\r\n  addPlaylistRequest,\r\n  addPlaylistSuccess,\r\n  getPlaylistsRequest,\r\n  getPlaylistsSuccess,\r\n  getOnePlaylistRequest,\r\n  getOnePlaylistSuccess,\r\n  deletePlaylistRequest,\r\n  updatePlaylistRequest,\r\n  getPlaylistsByVideoRequest,\r\n  getPlaylistsByVideoSuccess,\r\n};\r\n","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\videos\\actions.js",["408"],"export const Types = {\r\n  ADD_VIDEO_TO_PLAYLIST_REQUEST: \"ADD_VIDEO_TO_PLAYLIST_REQUEST\",\r\n  ADD_VIDEO_TO_PLAYLIST_SUCCESS: \"ADD_VIDEO_TO_PLAYLIST_SUCCESS\",\r\n\r\n  GET_VIDEOS_REQUEST: \"GET_VIDEOS_REQUEST\",\r\n  GET_VIDEOS_SUCCESS: \"GET_VIDEOS_SUCCESS\",\r\n\r\n  GET_ONE_VIDEO_REQUEST: \"GET_ONE_VIDEO_REQUEST\",\r\n  GET_ONE_VIDEO_SUCCESS: \"GET_ONE_VIDEO_SUCCESS\",\r\n\r\n  GET_VIDEO_BY_PLAYLIST_REQUEST: \"GET_VIDEO_BY_PLAYLIST_REQUEST\",\r\n  GET_VIDEO_BY_PLAYLIST_SUCCESS: \"GET_VIDEO_BY_PLAYLIST_SUCCESS\",\r\n\r\n  REMOVE_VIDEO_FROM_PLAYLIST_REQUEST: \"REMOVE_VIDEO_FROM_PLAYLIST_REQUEST\",\r\n\r\n  UPDATE_VIDEO_REQUEST: \"UPDATE_VIDEO_REQUEST\",\r\n\r\n  CHANGE_VIDEO_ORDER_REQUEST: \"CHANGE_VIDEO_ORDER_REQUEST\"\r\n};\r\n\r\nconst addVideoToPlaylistRequest = (payload) => ({\r\n  type: Types.ADD_VIDEO_TO_PLAYLIST_REQUEST,\r\n  payload,\r\n});\r\n\r\nconst addVideoToPlaylistSuccess = () => ({\r\n  type: Types.ADD_VIDEO_TO_PLAYLIST_SUCCESS,\r\n});\r\n\r\nconst getVideosRequest = (payload) => ({\r\n  type: Types.GET_VIDEOS_REQUEST,\r\n  payload,\r\n});\r\n\r\nconst getVideosSuccess = (payload) => ({\r\n  type: Types.GET_VIDEOS_SUCCESS,\r\n  payload,\r\n});\r\n\r\nconst getOneVideoRequest = (payload) => ({\r\n  type: Types.GET_ONE_VIDEO_REQUEST,\r\n  payload,\r\n});\r\n\r\nconst getOneVideoSuccess = (payload) => ({\r\n  type: Types.GET_ONE_VIDEO_SUCCESS,\r\n  payload,\r\n});\r\n\r\nconst getVideoByPlaylistRequest = (payload) => ({\r\n  type: Types.GET_VIDEO_BY_PLAYLIST_REQUEST,\r\n  payload,\r\n});\r\n\r\nconst getVideoByPlaylistSuccess = (payload) => ({\r\n  type: Types.GET_VIDEO_BY_PLAYLIST_SUCCESS,\r\n  payload,\r\n});\r\n\r\nconst removeVideoFromPlaylistRequest = (payload) => ({\r\n  type: Types.REMOVE_VIDEO_FROM_PLAYLIST_REQUEST,\r\n  payload,\r\n});\r\n\r\nconst updateVideoRequest = (payload) => ({\r\n  type: Types.UPDATE_VIDEO_REQUEST,\r\n  payload,\r\n});\r\n\r\nconst changeVideoOrderRequest = (payload) => ({\r\n  type: Types.CHANGE_VIDEO_ORDER_REQUEST,\r\n  payload,\r\n});\r\n\r\nexport default {\r\n  addVideoToPlaylistRequest,\r\n  addVideoToPlaylistSuccess,\r\n  getVideosRequest,\r\n  getVideosSuccess,\r\n  getOneVideoRequest,\r\n  getOneVideoSuccess,\r\n  getVideoByPlaylistRequest,\r\n  getVideoByPlaylistSuccess,\r\n  removeVideoFromPlaylistRequest,\r\n  updateVideoRequest,\r\n  changeVideoOrderRequest\r\n};\r\n","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\languages\\actions.js",["409"],"export const Types = {\r\n  GET_LANGUAGES_REQUEST: \"GET_LANGUAGES_REQUEST\",\r\n  GET_LANGUAGES_SUCCESS: \"GET_LANGUAGES_SUCCESS\",\r\n\r\n  GET_CHANNEL_LANGUAGES_REQUEST: \"GET_CHANNEL_LANGUAGES_REQUEST\",\r\n  GET_CHANNEL_LANGUAGES_SUCCESS: \"GET_CHANNEL_LANGUAGES_SUCCESS\",\r\n\r\n  UPDATE_CHANNEL_LANGUAGES_REQUEST: \"UPDATE_CHANNEL_LANGUAGES_REQUEST\",\r\n  UPDATE_CHANNEL_LANGUAGES_SUCCESS: \"UPDATE_CHANNEL_LANGUAGES_SUCCESS\",\r\n};\r\n\r\nconst getChannelLanguagesRequest = (payload) => ({\r\n  type: Types.GET_CHANNEL_LANGUAGES_REQUEST,\r\n  payload,\r\n});\r\n\r\nconst getChannelLanguagesSuccess = (payload) => ({\r\n  type: Types.GET_CHANNEL_LANGUAGES_SUCCESS,\r\n  payload,\r\n});\r\n\r\nconst getLanguagesRequest = () => ({\r\n  type: Types.GET_LANGUAGES_REQUEST,\r\n});\r\n\r\nconst getLanguagesSuccess = (payload) => ({\r\n  type: Types.GET_LANGUAGES_SUCCESS,\r\n  payload,\r\n});\r\n\r\nconst updateChannelLanguagesRequest = (payload) => ({\r\n  type: Types.UPDATE_CHANNEL_LANGUAGES_REQUEST,\r\n  payload,\r\n});\r\n\r\nconst updateChannelLanguagesSuccess = () => ({\r\n  type: Types.UPDATE_CHANNEL_LANGUAGES_SUCCESS,\r\n});\r\n\r\nexport default {\r\n  getLanguagesRequest,\r\n  getLanguagesSuccess,\r\n  getChannelLanguagesRequest,\r\n  getChannelLanguagesSuccess,\r\n  updateChannelLanguagesRequest,\r\n  updateChannelLanguagesSuccess,\r\n};\r\n","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\layout\\actions.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\selectors\\index.js",["410"],"import authorization from './authorization'\r\nimport profile from './profile'\r\nimport common from './common'\r\nimport channels from './channels'\r\nimport playlists from './playlists'\r\nimport videos from './videos'\r\nimport languages from './languages'\r\n\r\nexport default {\r\n    authorization,\r\n    profile,\r\n    common,\r\n    channels,\r\n    playlists,\r\n    videos,\r\n    languages\r\n}","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\helpers\\validation.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\layout\\reducer.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\sagas\\languages.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\sagas\\videos.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\sagas\\channels.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\sagas\\playlists.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\sagas\\authorization.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\sagas\\profile.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\layout\\saga.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Channels\\DeleteChannelDialog.jsx",["411"],"import React from 'react';\r\nimport { Button, Modal, ModalHeader, ModalFooter } from 'reactstrap';\r\nimport { connect } from \"react-redux\";\r\nimport Actions from './../../store/actions';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const DeleteChannelDialog = (props) => {\r\n  const { modal, className, toggle, onChannelDelete, channelId, channelName, history } = props;\r\n\r\n  const onDelete = () => {\r\n    localStorage.removeItem(\"channel\");\r\n    onChannelDelete({id: channelId});\r\n    toggle()\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        isOpen={modal}\r\n        toggle={toggle}\r\n        className={className}>\r\n        <ModalHeader toggle={toggle}>\r\n          Are you sure you want to delete \"{channelName}\" channel?\r\n        </ModalHeader>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" className=\"w-sm\" onClick={toggle}>Cancel</Button>\r\n          <Link to=\"/dashboard\"><Button color=\"danger\" className=\"w-sm\" onClick={onDelete}>Delete</Button></Link>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n\tonChannelDelete: (data) => dispatch(Actions.channels.deleteChannelRequest(data)),\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(DeleteChannelDialog);","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\TabButton\\TabButton.jsx",["412"],"import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport { Button, Nav, NavItem, NavLink } from \"reactstrap\";\r\n\r\nconst TabButton = (props) => {\r\n  const { activeTab, toggleTab, countPlaylists, countVideos } = props;\r\n  const buttons = [\r\n    { name: \"Upload\", tab: \"3\" },\r\n    { name: \"Playlists\", tab: \"1\", total: countPlaylists },\r\n    { name: \"Videos\", tab: \"2\", total: countVideos },\r\n  ];\r\n  return (\r\n    <Nav className=\"border-0 navi\" vertical>\r\n      {buttons.map((b, index) => {\r\n        return (\r\n          <NavItem\r\n            key={index}\r\n            className={b.name === \"Upload\" ? \"w-100\"  : \"d-flex justify-content-between align-items-baseline\"}\r\n          >\r\n            <NavLink\r\n              className=\"px-0\"\r\n              className={classnames({\r\n                active: activeTab === b.tab,\r\n              })}\r\n              onClick={() => {\r\n                toggleTab(b.tab);\r\n              }}\r\n            >\r\n              {b.name === \"Upload\" ? (\r\n                <Button className=\"w-100 mb-4\" color=\"success\">\r\n                  {b.name}\r\n                </Button>\r\n              ) : (\r\n                <>\r\n                  {\" \"}\r\n                  <i className=\"dripicons-star mr-2\"></i> {b.name}\r\n                </>\r\n              )}\r\n            </NavLink>\r\n            {b.name === \"Upload\" ? null : <span>{b.total || 0}</span>}\r\n          </NavItem>\r\n        );\r\n      })}\r\n    </Nav>\r\n  );\r\n};\r\n\r\nexport default TabButton;","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\components\\HorizontalLayout\\Footer.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\components\\HorizontalLayout\\Navbar.js",["413"],"import React, { useEffect } from \"react\";\r\nimport {\r\n  // Row,\r\n  // Col,\r\n  Collapse,\r\n} from \"reactstrap\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\n// import classname from \"classnames\";\r\n\r\n//i18n\r\nimport { withNamespaces } from \"react-i18next\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Actions from \"../../store/actions\";\r\nimport selectors from \"../../selectors\";\r\n\r\nconst Navbar = (props) => {\r\n  //   const [dashboard, setdashboard] = useState(false);\r\n  //   const [settings, setSettings] = useState(false);\r\n\r\n  // const [ui, setui] = useState(false);\r\n  // const [product, setProduct] = useState(false);\r\n  // const [email, setemail] = useState(false);\r\n  // const [ecommerce, setecommerce] = useState(false);\r\n  // const [crypto, setcrypto] = useState(false);\r\n  // const [project, setproject] = useState(false);\r\n  // const [task, settask] = useState(false);\r\n  // const [contact, setcontact] = useState(false);\r\n  // const [component, setcomponent] = useState(false);\r\n  // const [form, setform] = useState(false);\r\n  // const [table, settable] = useState(false);\r\n  // const [chart, setchart] = useState(false);\r\n  // const [icon, seticon] = useState(false);\r\n  // const [map, setmap] = useState(false);\r\n  // const [invoice, setinvoice] = useState(false);\r\n  // const [auth, setauth] = useState(false);\r\n  // const [utility, setutility] = useState(false);\r\n\r\n  // Get default channel\r\n  const defaultChannel = JSON.parse(localStorage.getItem(\"channel\"));\r\n\r\n  useEffect(() => {\r\n    var matchingMenuItem = null;\r\n    var ul = document.getElementById(\"navigation\");\r\n    var items = ul.getElementsByTagName(\"a\");\r\n    for (var i = 0; i < items.length; ++i) {\r\n      if (props.location.pathname === items[i].pathname) {\r\n        matchingMenuItem = items[i];\r\n        break;\r\n      }\r\n    }\r\n    if (matchingMenuItem) {\r\n      activateParentDropdown(matchingMenuItem);\r\n    }\r\n  });\r\n  function activateParentDropdown(item) {\r\n    item.classList.add(\"active\");\r\n    const parent = item.parentElement;\r\n    if (parent) {\r\n      parent.classList.add(\"active\"); // li\r\n      const parent2 = parent.parentElement;\r\n      parent2.classList.add(\"active\"); // li\r\n      const parent3 = parent2.parentElement;\r\n      if (parent3) {\r\n        parent3.classList.add(\"active\"); // li\r\n        const parent4 = parent3.parentElement;\r\n        if (parent4) {\r\n          parent4.classList.add(\"active\"); // li\r\n          const parent5 = parent4.parentElement;\r\n          if (parent5) {\r\n            parent5.classList.add(\"active\"); // li\r\n            const parent6 = parent5.parentElement;\r\n            if (parent6) {\r\n              parent6.classList.add(\"active\"); // li\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"topnav\">\r\n        <div className=\"container-fluid\">\r\n          <nav\r\n            className=\"navbar navbar-light navbar-expand-lg topnav-menu\"\r\n            id=\"navigation\"\r\n          >\r\n            <Collapse\r\n              isOpen={props.leftMenu}\r\n              className=\"navbar-collapse\"\r\n              id=\"topnav-menu-content\"\r\n            >\r\n              <ul className=\"navbar-nav\">\r\n                <li className=\"nav-item dropdown\">\r\n                  <Link className=\"nav-link dropdown-toggle arrow-none\" to=\"#\">\r\n                    <i className=\"bx bx-home-circle mr-2\"></i>\r\n                    {props.t(\"Dashboard\")}\r\n                    {props.menuOpen} <span className=\"arrow-down\" />\r\n                  </Link>\r\n                  <div className=\"dropdown-menu\">\r\n                    <Link to=\"/dashboard\" className=\"dropdown-item\">\r\n                      {props.t(\"Default\")}\r\n                    </Link>\r\n                  </div>\r\n                </li>\r\n\r\n                {/* ADD CONTENT PAGE */}\r\n                <li className=\"nav-item\">\r\n                  <Link\r\n                    className=\"nav-link arrow-none\"\r\n                    to=\"/content\"\r\n                    onClick={() => {\r\n                      props.onGetPlaylist({\r\n                        id: defaultChannel?.id || \"1\",\r\n                        count: 0,\r\n                      });\r\n                      props.onGetVideos({ id: defaultChannel?.id, count: 0 });\r\n                    }}\r\n                  >\r\n                    <i className=\"bx bx-home-circle mr-2\"></i>\r\n                    {props.t(\"Content\")}\r\n                  </Link>\r\n                </li>\r\n\r\n                {/* <li className=\"nav-item dropdown\">\r\n                                        <Link to=\"/#\" onClick={e => { e.preventDefault(); setui(!ui); }} className=\"nav-link dropdown-toggle arrow-none\">\r\n                                            <i className=\"bx bx-tone mr-2\"></i>{props.t('UI Elements')} <div className=\"arrow-down\"></div>\r\n                                        </Link>\r\n                                        <div\r\n                                            className={classname(\r\n                                                \"dropdown-menu mega-dropdown-menu dropdown-menu-left dropdown-mega-menu-xl\",\r\n                                                { show: ui })}>\r\n                                            <Row>\r\n                                                <Col lg={4}>\r\n                                                    <div>\r\n                                                        <Link to=\"ui-alerts\" className=\"dropdown-item\">{props.t('Alerts')}</Link>\r\n                                                        <Link to=\"ui-buttons\" className=\"dropdown-item\">{props.t('Buttons')}</Link>\r\n                                                        <Link to=\"ui-cards\" className=\"dropdown-item\">{props.t('Cards')}</Link>\r\n                                                        <Link to=\"ui-carousel\" className=\"dropdown-item\">{props.t('Carousel')}</Link>\r\n                                                        <Link to=\"ui-dropdowns\" className=\"dropdown-item\">{props.t('Dropdowns')}</Link>\r\n                                                        <Link to=\"ui-grid\" className=\"dropdown-item\">{props.t('Grid')}</Link>\r\n                                                        <Link to=\"ui-images\" className=\"dropdown-item\">{props.t('Images')}</Link>\r\n                                                    </div>\r\n                                                </Col>\r\n                                                <Col lg={4}>\r\n                                                    <div>\r\n                                                        <Link to=\"ui-lightbox\" className=\"dropdown-item\">{props.t('Lightbox')}</Link>\r\n                                                        <Link to=\"ui-modals\" className=\"dropdown-item\">{props.t('Modals')}</Link>\r\n                                                        <Link to=\"ui-rangeslider\" className=\"dropdown-item\">{props.t('Range Slider')}</Link>\r\n                                                        <Link to=\"ui-session-timeout\" className=\"dropdown-item\">{props.t('Session Timeout')}</Link>\r\n                                                        <Link to=\"ui-progressbars\" className=\"dropdown-item\">{props.t('Progress Bars')}</Link>\r\n                                                        <Link to=\"ui-sweet-alert\" className=\"dropdown-item\">{props.t('Sweet-Alert')}</Link>\r\n                                                        <Link to=\"ui-tabs-accordions\" className=\"dropdown-item\">{props.t('Tabs & Accordions')}</Link>\r\n                                                    </div>\r\n                                                </Col>\r\n                                                <Col lg={4}>\r\n                                                    <div>\r\n                                                        <Link to=\"ui-typography\" className=\"dropdown-item\">{props.t('Typography')}</Link>\r\n                                                        <Link to=\"ui-video\" className=\"dropdown-item\">{props.t('Video')}</Link>\r\n                                                        <Link to=\"ui-general\" className=\"dropdown-item\">{props.t('General')}</Link>\r\n                                                        <Link to=\"ui-colors\" className=\"dropdown-item\">{props.t('Colors')}</Link>\r\n                                                        <Link to=\"ui-rating\" className=\"dropdown-item\">{props.t('Rating')}</Link>\r\n                                                        <Link to=\"ui-notifications\" className=\"dropdown-item\">{props.t('Notifications')}</Link>\r\n                                                        <Link to=\"ui-image-cropper\" className=\"dropdown-item\">{props.t('Image Cropper')}</Link>\r\n                                                    </div>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </div>\r\n                                    </li> */}\r\n\r\n                {/* <li className=\"nav-item\">\r\n                                        <Link to=\"#\" onClick={e => { e.preventDefault(); setProduct(!product); }} className=\"nav-link dropdown-togglez arrow-none\"  >\r\n                                            <i className=\"bx bx-customize mr-2\"></i>Product <div className=\"arrow-down\"></div>\r\n                                        </Link>\r\n                                        <div className={classname(\"dropdown-menu\", { show: product })} >\r\n                                            <Link to=\"#\" className=\"dropdown-item\">Exmple</Link>\r\n                                        </div>\r\n                                    </li> */}\r\n\r\n                {/* <li className=\"nav-item dropdown\">\r\n                                        <Link to=\"/#\" className=\"nav-link dropdown-toggle arrow-none\"\r\n                                            onClick={e => {\r\n                                                e.preventDefault();\r\n                                                setcomponent(!component);\r\n                                            }}>\r\n                                            <i className=\"bx bx-collection mr-2\"></i>{props.t('Components')} <div className=\"arrow-down\"></div>\r\n                                        </Link>\r\n                                        <div className={classname(\"dropdown-menu\", { show: component })}>\r\n                                            <div className=\"dropdown\">\r\n                                                <Link to=\"/#\" className=\"dropdown-item dropdown-toggle arrow-none\"\r\n                                                    onClick={e => {\r\n                                                        e.preventDefault();\r\n                                                        setform(!form);\r\n                                                    }}>\r\n                                                   {props.t('Forms')}  <div className=\"arrow-down\"></div>\r\n                                                </Link>\r\n                                                <div className={classname(\"dropdown-menu\", { show:form })}>\r\n                                                    <Link to=\"form-elements\" className=\"dropdown-item\">{props.t('Form Elements')}</Link>\r\n                                                    <Link to=\"form-validation\" className=\"dropdown-item\">{props.t('Form Validation')}</Link>\r\n                                                    <Link to=\"form-advanced\" className=\"dropdown-item\">{props.t('Form Advanced')}</Link>\r\n                                                    <Link to=\"form-editors\" className=\"dropdown-item\">{props.t('Form Editors')}</Link>\r\n                                                    <Link to=\"form-uploads\" className=\"dropdown-item\">{props.t('Form File Upload')} </Link>\r\n                                                    <Link to=\"form-xeditable\" className=\"dropdown-item\">{props.t('Form Xeditable')}</Link>\r\n                                                    <Link to=\"form-repeater\" className=\"dropdown-item\">{props.t('Form Repeater')}</Link>\r\n                                                    <Link to=\"form-wizard\" className=\"dropdown-item\">{props.t('Form Wizard')}</Link>\r\n                                                    <Link to=\"form-mask\" className=\"dropdown-item\">{props.t('Form Mask')}</Link>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"dropdown\">\r\n                                                <Link to=\"/#\" className=\"dropdown-item dropdown-toggle arrow-none\"\r\n                                                    onClick={e => {\r\n                                                        e.preventDefault();\r\n                                                        settable(!table);\r\n                                                    }}>\r\n                                                    {props.t('Tables')} <div className=\"arrow-down\"></div>\r\n                                                </Link>\r\n                                                <div className={classname(\"dropdown-menu\", { show: table })}>\r\n                                                    <Link to=\"tables-basic\" className=\"dropdown-item\">{props.t('Basic Tables')}</Link>\r\n                                                    <Link to=\"tables-datatable\" className=\"dropdown-item\">{props.t('Data Tables')}</Link>\r\n                                                    <Link to=\"tables-responsive\" className=\"dropdown-item\">{props.t('Responsive Table')}</Link>\r\n                                                    <Link to=\"tables-editable\" className=\"dropdown-item\">{props.t('Editable Table')}</Link>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"dropdown\">\r\n                                                <Link to=\"/#\" className=\"dropdown-item dropdown-toggle arrow-none\"\r\n                                                    onClick={e => {\r\n                                                        e.preventDefault();\r\n                                                        setchart(!chart);\r\n                                                    }}>\r\n                                                     {props.t('Charts')} <div className=\"arrow-down\"></div>\r\n                                                </Link>\r\n                                                <div className={classname(\"dropdown-menu\", { show: chart })}>\r\n                                                    <Link to=\"apex-charts\" className=\"dropdown-item\"> {props.t('Apex charts')}</Link>\r\n                                                    <Link to=\"chartist-charts\" className=\"dropdown-item\"> {props.t('Chartjs Chart')}</Link>\r\n                                                    <Link to=\"e-charts\" className=\"dropdown-item\"> {props.t('E Chart')}</Link>\r\n                                                    <Link to=\"tui-charts\" className=\"dropdown-item\">{props.t('Toast UI Chart')}</Link>\r\n                                                    <Link to=\"sparkline-charts\" className=\"dropdown-item\"> {props.t('Sparkline Chart')}</Link>\r\n                                                    <Link to=\"charts-knob\" className=\"dropdown-item\">{props.t('Knob Chart')}</Link>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"dropdown\">\r\n                                                <Link to=\"/#\" className=\"dropdown-item dropdown-toggle arrow-none\"\r\n                                                    onClick={e => {\r\n                                                        e.preventDefault();\r\n                                                        seticon(!icon);\r\n                                                    }}>\r\n                                                     {props.t('Icons')} <div className=\"arrow-down\"></div>\r\n                                                </Link>\r\n                                                <div className={classname(\"dropdown-menu\", { show: icon })}>\r\n                                                    <Link to=\"icons-boxicons\" className=\"dropdown-item\">{props.t('Boxicons')}</Link>\r\n                                                    <Link to=\"icons-materialdesign\" className=\"dropdown-item\">{props.t('Material Design')}</Link>\r\n                                                    <Link to=\"icons-dripicons\" className=\"dropdown-item\">{props.t('Dripicons')}</Link>\r\n                                                    <Link to=\"icons-fontawesome\" className=\"dropdown-item\">{props.t('Font awesome')} </Link>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"dropdown\">\r\n                                                <Link to=\"/#\" className=\"dropdown-item dropdown-toggle arrow-none\"\r\n                                                    onClick={e => {\r\n                                                        e.preventDefault();\r\n                                                        setmap(!map);\r\n                                                    }}>\r\n                                                    {props.t('Maps')} <div className=\"arrow-down\"></div>\r\n                                                </Link>\r\n                                                <div className={classname(\"dropdown-menu\", { show: map })}>\r\n                                                    <Link to=\"maps-google\" className=\"dropdown-item\">{props.t('Google Maps')} </Link>\r\n                                                    <Link to=\"maps-vector\" className=\"dropdown-item\">{props.t('Vector Maps')} </Link>\r\n                                                    <Link to=\"maps-leaflet\" className=\"dropdown-item\">{props.t('Leaflet Maps')} </Link>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </li> */}\r\n\r\n                <li className=\"nav-item dropdown\">\r\n                  <Link className=\"nav-link dropdown-toggle\" to=\"#\">\r\n                    <i className=\"bx bx-file mr-2\"></i>Settings{\" \"}\r\n                    <div className=\"arrow-down\"></div>\r\n                  </Link>\r\n                  <div className=\"dropdown-menu\">\r\n                    <Link\r\n                      to=\"/channels/getting-started\"\r\n                      className=\"dropdown-item\"\r\n                    >\r\n                      Getting Started\r\n                    </Link>\r\n                    <Link to=\"/channels/settings\" className=\"dropdown-item\">\r\n                      Channel Settings\r\n                    </Link>\r\n                  </div>\r\n                </li>\r\n              </ul>\r\n            </Collapse>\r\n          </nav>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStatetoProps = (state) => {\r\n  const { leftMenu } = state.Layout;\r\n  return { leftMenu };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onGetPlaylist: (data) =>\r\n    dispatch(Actions.playlists.getPlaylistsRequest(data)),\r\n  onGetVideos: (data) => dispatch(Actions.videos.getVideosRequest(data)),\r\n});\r\n\r\nexport default withRouter(\r\n  connect(mapStatetoProps, mapDispatchToProps)(withNamespaces()(Navbar))\r\n);\r\n","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\components\\CommonForBoth\\Rightbar.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Dashboard\\ApexRadial.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\components\\HorizontalLayout\\Header.jsx",["414","415"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { showRightSidebarAction, toggleLeftmenu } from \"../../store/actions\";\r\nimport {\r\n  Dropdown,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  Button,\r\n} from \"reactstrap\";\r\nimport LanguageDropdown from \"../CommonForBoth/TopbarDropdown/LanguageDropdown\";\r\nimport ProfileMenu from \"../CommonForBoth/TopbarDropdown/ProfileMenu\";\r\nimport logo from \"../../assets/images/bring-stream_logo-wite.png\";\r\nimport { connect } from \"react-redux\";\r\nimport Actions from \"../../store/actions\";\r\nimport selectors from \"../../selectors\";\r\nimport { withNamespaces } from \"react-i18next\";\r\nimport \"./styles.scss\";\r\n\r\nconst Header = (props) => {\r\n  const [menu, setMenu] = useState(false);\r\n  const {\r\n    channels,\r\n    activeChannel,\r\n    setActiveChannel,\r\n    onGetChannels,\r\n    onUpdateChannelLanguages,\r\n    channelLanguages,\r\n    onGetChannelLanguages,\r\n    getLanguages,\r\n  } = props;\r\n  let defaultChannel = JSON.parse(localStorage.getItem(\"channel\"));\r\n  // set default channel\r\n  useEffect(() => {\r\n    if (channels === null) {\r\n      onGetChannels();\r\n    }\r\n    if (\r\n      activeChannel &&\r\n      defaultChannel &&\r\n      defaultChannel?.name !== activeChannel?.name\r\n    ) {\r\n      localStorage.setItem(\"channel\", JSON.stringify(activeChannel));\r\n      onGetChannelLanguages(activeChannel.id);\r\n      getLanguages();\r\n    }\r\n    if (channels && defaultChannel === null) {\r\n      localStorage.setItem(\"channel\", JSON.stringify(channels[0]));\r\n      setActiveChannel(channels[0]);\r\n\r\n      onGetChannelLanguages(channels[0].id);\r\n      getLanguages();\r\n    }\r\n    if(defaultChannel && activeChannel === null) {\r\n      onGetChannelLanguages(defaultChannel.id);\r\n      getLanguages();\r\n    }\r\n  }, [channels, activeChannel, defaultChannel]);\r\n\r\n  // Set default eng lang\r\n  useEffect(() => {\r\n    if (defaultChannel && channelLanguages !== null) {\r\n      if (\r\n        channelLanguages.length === 0 ||\r\n        channelLanguages[\"en\"] === 0 ||\r\n        !(\"en\" in channelLanguages)\r\n      ) {\r\n        const all = { ...channelLanguages };\r\n\r\n        all[\"en\"] = 1;\r\n\r\n        onUpdateChannelLanguages({\r\n          channelId: defaultChannel.id,\r\n          languages: all,\r\n        });\r\n        setTimeout(() => {\r\n          onGetChannelLanguages(defaultChannel.id);\r\n        }, 1000);\r\n      }\r\n    }\r\n  }, [channelLanguages, defaultChannel]);\r\n\r\n  function toggleFullscreen() {\r\n    if (\r\n      !document.fullscreenElement &&\r\n      /* alternative standard method */ !document.mozFullScreenElement &&\r\n      !document.webkitFullscreenElement\r\n    ) {\r\n      // current working methods\r\n      if (document.documentElement.requestFullscreen) {\r\n        document.documentElement.requestFullscreen();\r\n      } else if (document.documentElement.mozRequestFullScreen) {\r\n        document.documentElement.mozRequestFullScreen();\r\n      } else if (document.documentElement.webkitRequestFullscreen) {\r\n        document.documentElement.webkitRequestFullscreen(\r\n          Element.ALLOW_KEYBOARD_INPUT\r\n        );\r\n      }\r\n    } else {\r\n      if (document.cancelFullScreen) {\r\n        document.cancelFullScreen();\r\n      } else if (document.mozCancelFullScreen) {\r\n        document.mozCancelFullScreen();\r\n      } else if (document.webkitCancelFullScreen) {\r\n        document.webkitCancelFullScreen();\r\n      }\r\n    }\r\n  }\r\n\r\n  const mapChannelsSelect = () => {\r\n    if (channels === null || channels?.length === 0) {\r\n      return (\r\n        <Link to=\"/channels/create\">\r\n          <Button color=\"secondary\" outline className=\"waves-effect\">\r\n            <i className=\"bx bx-plus font-size-16 align-middle mr-2\" />\r\n            Creacte a new project\r\n          </Button>\r\n        </Link>\r\n      );\r\n    } else {\r\n      return (\r\n        <>\r\n          <Dropdown isOpen={menu} toggle={() => setMenu(!menu)}>\r\n            <DropdownToggle outline color=\"secondary\" caret>\r\n              {activeChannel?.name} <i className=\"mdi mdi-chevron-down\" />\r\n            </DropdownToggle>\r\n            <DropdownMenu>\r\n              {channels?.map((item) => (\r\n                <Link to=\"/dashboard\" key={item.id}>\r\n                  {\" \"}\r\n                  <DropdownItem\r\n                    onClick={() => {\r\n                      setActiveChannel(item);\r\n                      localStorage.setItem(\"channel\", JSON.stringify(item));\r\n                      onGetChannelLanguages(item.id);\r\n                      getLanguages();\r\n                    }}\r\n                  >\r\n                    {item.name}\r\n                  </DropdownItem>\r\n                </Link>\r\n              ))}\r\n\r\n              <DropdownItem>\r\n                <Link to=\"/channels/create\">\r\n                  <i className=\"bx bx-plus font-size-16 align-middle mr-2\" />\r\n                  Creacte a new project\r\n                </Link>\r\n              </DropdownItem>\r\n            </DropdownMenu>\r\n          </Dropdown>\r\n          {activeChannel?.url_bs && (\r\n            <a\r\n              className=\"visite-site-link\"\r\n              href={activeChannel?.url_bs}\r\n              rel=\"noopener noreferrer\"\r\n              target=\"_blank\"\r\n            >\r\n              <Button color=\"secondary\" outline className=\"btn-sm\">\r\n                Visit Site\r\n              </Button>\r\n            </a>\r\n          )}\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <header id=\"page-topbar\">\r\n        <div className=\"navbar-header\">\r\n          <div className=\"d-flex\">\r\n            <div className=\"navbar-brand-box\">\r\n              <Link to=\"/dashboard\" className=\"logo\">\r\n                <img src={logo} alt=\"\" />\r\n              </Link>\r\n            </div>\r\n\r\n            {/* Mobile menu button */}\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-sm px-3 font-size-16 d-lg-none header-item waves-effect waves-light\"\r\n              data-toggle=\"collapse\"\r\n              onClick={() => {\r\n                props.toggleLeftmenu(!props.leftMenu);\r\n              }}\r\n              data-target=\"#topnav-menu-content\"\r\n            >\r\n              <i className=\"fa fa-fw fa-bars\"></i>\r\n            </button>\r\n\r\n            <div className=\"header-buttons-wrapper\">{mapChannelsSelect()}</div>\r\n          </div>\r\n          <div className=\"d-flex\">\r\n            <LanguageDropdown />\r\n\r\n            <div className=\"dropdown d-none d-lg-inline-block ml-1\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn header-item noti-icon waves-effect\"\r\n                onClick={() => {\r\n                  toggleFullscreen();\r\n                }}\r\n                data-toggle=\"fullscreen\"\r\n              >\r\n                <i className=\"bx bx-fullscreen\"></i>\r\n              </button>\r\n            </div>\r\n\r\n            <ProfileMenu />\r\n\r\n            {/* <div className=\"dropdown d-inline-block\">\r\n                <button\r\n                  onClick={() => { props.showRightSidebarAction(!props.showRightSidebar); }}\r\n                  type=\"button\"\r\n                  className=\"btn header-item noti-icon right-bar-toggle waves-effect\" >\r\n                  <i className=\"bx bx-cog bx-spin\"></i>\r\n                </button>\r\n              </div> */}\r\n          </div>\r\n        </div>\r\n      </header>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStatetoProps = (state) => {\r\n  const { layoutType, showRightSidebar, leftMenu } = state.Layout;\r\n  return {\r\n    layoutType,\r\n    showRightSidebar,\r\n    leftMenu,\r\n    channels: selectors.channels.channels(state),\r\n    activeChannel: selectors.channels.activeChannel(state),\r\n    channelLanguages: selectors.languages.channelLanguages(state),\r\n    languagesAll: selectors.languages.languagesAll(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  showRightSidebarAction: (value) => dispatch(showRightSidebarAction(value)),\r\n  toggleLeftmenu: (value) => dispatch(toggleLeftmenu(value)),\r\n  onGetChannels: () => dispatch(Actions.channels.getChannelsRequest()),\r\n  setActiveChannel: (data) => dispatch(Actions.channels.setActiveChannel(data)),\r\n\r\n  getLanguages: () => dispatch(Actions.languages.getLanguagesRequest()),\r\n  onGetChannelLanguages: (data) =>\r\n    dispatch(Actions.languages.getChannelLanguagesRequest(data)),\r\n  onUpdateChannelLanguages: (data) =>\r\n    dispatch(Actions.languages.updateChannelLanguagesRequest(data)),\r\n});\r\n\r\nexport default connect(\r\n  mapStatetoProps,\r\n  mapDispatchToProps\r\n)(withNamespaces()(Header));\r\n","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\languages\\index.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\layout\\actionTypes.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\playlists\\index.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\channels\\index.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\videos\\index.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\profile\\index.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\common\\index.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\store\\authorization\\index.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\selectors\\authorization\\index.js",["416"],"import { createSelector } from 'reselect'\r\nimport { selector, deepEqualSelector } from '../common'\r\n\r\nconst authorization = createSelector(selector, data => data.authorization)\r\nconst authData = deepEqualSelector(authorization, data => data.authData)\r\n\r\nexport default {\r\n  authData,\r\n}","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\selectors\\profile\\index.js",["417"],"// import { createSelector } from 'reselect'\r\nimport { selector, deepEqualSelector } from '../common'\r\n\r\nconst profile = deepEqualSelector(selector, data => data.profile)\r\nconst user = deepEqualSelector(profile, data => data.user)\r\n\r\nexport default {\r\n  user,\r\n}","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\selectors\\common\\index.js",["418"],"import { createSelectorCreator, defaultMemoize, createSelector } from 'reselect'\r\nimport isEqual from 'lodash.isequal'\r\n\r\nexport const selector = createSelector((s) => s, s => s)\r\nconst common = createSelector(selector, data => data.common) \r\nconst errorMessage = createSelector(common, data => data.errorMessage) \r\nconst successMessage = createSelector(common, data => data.successMessage) \r\nconst loader = createSelector(common, data => data.loader) \r\n\r\nexport const deepEqualSelector = createSelectorCreator(\r\n    defaultMemoize,\r\n    isEqual,\r\n)\r\n\r\nexport default {\r\n    errorMessage,\r\n    successMessage,\r\n    loader\r\n}","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\selectors\\languages\\index.js",["419"],"// import { createSelector } from 'reselect'\r\nimport { selector, deepEqualSelector } from \"../common\";\r\n\r\nconst self = deepEqualSelector(selector, (data) => data.languages);\r\nconst languagesAll = deepEqualSelector(self, (data) => data.languagesAll);\r\nconst channelLanguages = deepEqualSelector(self, (data) => data.channelLanguages);\r\n\r\nexport default {\r\n  channelLanguages,\r\n  languagesAll\r\n};","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\selectors\\videos\\index.js",["420"],"// import { createSelector } from 'reselect'\r\nimport { selector, deepEqualSelector } from \"../common\";\r\n\r\nconst self = deepEqualSelector(selector, (data) => data.videos);\r\nconst videos = deepEqualSelector(self, (data) => data.videos);\r\nconst videosByPlaylist = deepEqualSelector(\r\n  self,\r\n  (data) => data.videosByPlaylist\r\n);\r\nconst countVideos = deepEqualSelector(self, (data) => data.countVideos);\r\nconst countVideosByPlaylist = deepEqualSelector(self, (data) => data.countVideosByPlaylist)\r\nconst oneVideo = deepEqualSelector(self, (data) => data.oneVideo)\r\n\r\nexport default {\r\n  videos,\r\n  countVideos,\r\n  videosByPlaylist,\r\n  countVideosByPlaylist,\r\n  oneVideo\r\n};\r\n","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\selectors\\playlists\\index.js",["421"],"// import { createSelector } from 'reselect'\r\nimport { selector, deepEqualSelector } from \"../common\";\r\n\r\nconst self = deepEqualSelector(selector, (data) => data.playlists);\r\nconst playlists = deepEqualSelector(self, (data) => data.playlists);\r\nconst onePlaylist = deepEqualSelector(self, (data) => data.onePlaylist);\r\nconst count = deepEqualSelector(self, (data) => data.count);\r\nconst playlistsByVideo = deepEqualSelector(self, (data) => data.playlistsByVideo);\r\n\r\nexport default {\r\n  playlists,\r\n  onePlaylist,\r\n  count,\r\n  playlistsByVideo\r\n};","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\selectors\\channels\\index.js",["422"],"// import { createSelector } from 'reselect'\r\nimport { selector, deepEqualSelector } from '../common'\r\n\r\nconst self = deepEqualSelector(selector, data => data.channels)\r\nconst channels = deepEqualSelector(self, data => data.channels)\r\nconst activeChannel = deepEqualSelector(self, data => data.activeChannel)\r\nconst isChannelAddedSuccessfuly = deepEqualSelector(self, data => data.isChannelAddedSuccessfuly)\r\n\r\nexport default {\r\n  channels,\r\n  activeChannel,\r\n  isChannelAddedSuccessfuly,\r\n}","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\helpers\\api\\index.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\components\\CommonForBoth\\TopbarDropdown\\LanguageDropdown.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\components\\CommonForBoth\\TopbarDropdown\\ProfileMenu.jsx",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\helpers\\sha1.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\helpers\\api\\videos.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\helpers\\api\\languages.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\helpers\\api\\playlists.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\helpers\\api\\profile.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\helpers\\api\\channels.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\helpers\\api\\authorization.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\helpers\\loader.js",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\Content.jsx",["423","424","425","426"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport selectors from \"../../selectors\";\r\nimport Actions from \"../../store/actions\";\r\nimport { withNamespaces } from \"react-i18next\";\r\nimport Breadcrumbs from \"../../components/Common/Breadcrumb\";\r\nimport {\r\n  TabContent,\r\n  TabPane,\r\n  Card,\r\n  CardBody,\r\n  Row,\r\n  Col,\r\n  Container,\r\n} from \"reactstrap\";\r\nimport \"./content.scss\";\r\nimport Upload from \"./TabPanel/Upload/Upload\";\r\nimport TabPanel from \"./TabPanel/TabPanel\";\r\nimport TabButton from \"./TabButton/TabButton\";\r\n\r\nconst Content = (props) => {\r\n  // Get props\r\n  const {\r\n    playlists,\r\n    activeChannel,\r\n    onRemoveVideoFromPlaylist,\r\n    onAddPlaylist,\r\n    onPlaylistDelete,\r\n    onUpdatePlaylist,\r\n    onGetPlaylist,\r\n    onUpdateVideo,\r\n    onAddVideoToPlaylist,\r\n    onGetVideosByPlaylist,\r\n    videosByPlaylist,\r\n    onGetVideos,\r\n    videos,\r\n    countVideos,\r\n    countPlaylists,\r\n    countVideosByPlaylist,\r\n    loader,\r\n    setLoader,\r\n    channelLanguages,\r\n    onGetChannelLanguages,\r\n    languagesAll,\r\n    getLanguages,\r\n    onGetOnePlaylist,\r\n    onePlayist,\r\n    oneVideo,\r\n    onGetOneVideo,\r\n    onChangeVideoOrder,\r\n    onGetPlaylistsByVideo,\r\n    playlistsByVideo\r\n  } = props;\r\n\r\n  // State local\r\n  const [changePage, setChangePage] = useState(false);\r\n  const [modalDelete, setModalDelete] = useState(false);\r\n  const [checkName, setCheckName] = useState(\"\");\r\n  const [checkId, setCheckId] = useState(null);\r\n  const [checkDesc, setCheckDesc] = useState(\"\");\r\n  const [activeTab, setActiveTab] = useState(\"1\");\r\n  const [valueButton, setValueButton] = useState(\"\");\r\n  const [characters, updateCharacters] = useState(playlists);\r\n  const [checkedItems, setChekedItems] = useState([]);\r\n  const [modalSave, setModalSave] = useState(false);\r\n  const [editName, setEditName] = useState(\"\");\r\n  const [editDescription, setEditDescription] = useState(\"\");\r\n  const [dragVIdeo, updateDragVideo] = useState(videos);\r\n  const [getPlaylist, setGetPlaylist] = useState(null);\r\n  const [selectedPage, setSelectedPage] = useState(1);\r\n  // Meta state value\r\n  const [metaTitle, setMetaTitle] = useState(\"\");\r\n  const [metaKeyword, setMetaKeyword] = useState(\"\");\r\n  const [metaDesc, setMetaDesc] = useState(\"\");\r\n\r\n  // Vallues\r\n  const defaultChannel = JSON.parse(localStorage.getItem(\"channel\"));\r\n  const item = characters?.filter((c) => c.id === checkedItems[0]);\r\n  const itemVideos = dragVIdeo?.filter((v) => v.id === checkedItems[0]);\r\n\r\n  // Handle event\r\n  // Change page on click Create Playlist || Edit Playlist\r\n  const toEdit = (p, name) => {\r\n    if (name === \"editVideo\") {\r\n      setEditName( JSON.parse(p.description)[\"en\"][\"name\"] || \"\");\r\n      setEditDescription(JSON.parse(p.description)[\"en\"][\"description\"] || \"\");\r\n      setMetaTitle(\r\n        JSON.parse(p.description)[\"en\"][\"seo_title\"] || \"\"\r\n    );\r\n    setMetaKeyword(\r\n        JSON.parse(p.description)[\"en\"][\"seo_keyword\"] || \"\"\r\n    );\r\n    setMetaDesc(\r\n        JSON.parse(p.description)[\"en\"][\"seo_description\"] || \"\"\r\n    );\r\n      setCheckName(JSON.parse(p.description)[\"en\"][\"name\"] || \"\");\r\n      setCheckDesc(JSON.parse(p.description)[\"en\"][\"description\"] || \"\");\r\n      setCheckId(p.id);\r\n      setChangePage(true);\r\n      onGetPlaylistsByVideo({channel: defaultChannel?.id, video_id: p.id})\r\n    } else {\r\n      setEditName(\r\n          JSON.parse(p.description)[\"en\"][\"name\"] || \"\"\r\n      );\r\n      setEditDescription(\r\n          JSON.parse(p.description)[\"en\"][\"description\"] || \"\"\r\n      );\r\n      setMetaTitle(\r\n          JSON.parse(p.description)[\"en\"][\"seo_title\"] || \"\"\r\n      );\r\n      setMetaKeyword(\r\n          JSON.parse(p.description)[\"en\"][\"seo_keyword\"] || \"\"\r\n      );\r\n      setMetaDesc(\r\n          JSON.parse(p.description)[\"en\"][\"seo_description\"] || \"\"\r\n      );\r\n      setCheckName(p.name);\r\n      setCheckDesc(\r\n          JSON.parse(p.description)[\"en\"][\"description\"] || \"\"\r\n      );\r\n      setCheckId(p.id);\r\n      setChangePage(true);\r\n    }\r\n    setValueButton(name);\r\n    \r\n  };\r\n\r\n  const toForm = (e) => {\r\n    const nameButton = e.target.value;\r\n    switch (nameButton) {\r\n      case \"editPlaylist\":\r\n        setEditName(\r\n          JSON.parse(item[0].description)[\"en\"][\"name\"] || \"\"\r\n      );\r\n      setEditDescription(\r\n          JSON.parse(item[0].description)[\"en\"][\"description\"] || \"\"\r\n      );\r\n      setMetaTitle(\r\n          JSON.parse(item[0].description)[\"en\"][\"seo_title\"] || \"\"\r\n      );\r\n      setMetaKeyword(\r\n          JSON.parse(item[0].description)[\"en\"][\"seo_keyword\"] || \"\"\r\n      );\r\n      setMetaDesc(\r\n          JSON.parse(item[0].description)[\"en\"][\"seo_description\"] || \"\"\r\n      );\r\n      setCheckName(item[0].name);\r\n      setCheckDesc(\r\n          JSON.parse(item[0].description)[\"en\"][\"description\"] || \"\"\r\n      );\r\n        setCheckId(item[0].id);\r\n        onGetOnePlaylist({ id: item[0].id });\r\n        break;\r\n      case \"newPlaylist\":\r\n        setEditName(\"\");\r\n        setEditDescription(\"\");\r\n        setMetaTitle(\"\");\r\n        setMetaKeyword(\"\");\r\n        setMetaDesc(\"\");\r\n        setCheckName(\"\");\r\n        setEditDescription(\"\");\r\n        setCheckId(\"\");\r\n        break;\r\n      case \"editVideo\":\r\n      case \"newVideo\":\r\n        setEditName( JSON.parse(itemVideos[0].description)[\"en\"][\"name\"] || \"\");\r\n        setEditDescription(JSON.parse(itemVideos[0].description)[\"en\"][\"description\"] || \"\");\r\n        setMetaTitle(\r\n          JSON.parse(itemVideos[0].description)[\"en\"][\"seo_title\"] || \"\"\r\n      );\r\n      setMetaKeyword(\r\n          JSON.parse(itemVideos[0].description)[\"en\"][\"seo_keyword\"] || \"\"\r\n      );\r\n      setMetaDesc(\r\n          JSON.parse(itemVideos[0].description)[\"en\"][\"seo_description\"] || \"\"\r\n      );\r\n        setCheckName(JSON.parse(itemVideos[0].description)[\"en\"][\"name\"] || \"\");\r\n        setCheckDesc(JSON.parse(itemVideos[0].description)[\"en\"][\"description\"] || \"\");\r\n        setCheckId(itemVideos[0].id);\r\n        onGetOneVideo({id: itemVideos[0].id})\r\n        onGetPlaylistsByVideo({channel: defaultChannel?.id, video_id: itemVideos[0].id})\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    setValueButton(nameButton);\r\n    setChangePage(true);\r\n  };\r\n\r\n  // Toggle modal window (DELETE)\r\n  const toggleDelete = () => {\r\n    setModalDelete(!modalDelete);\r\n    item.length === 0\r\n      ? setCheckName(itemVideos[0].vimeo_name)\r\n      : setCheckName(item[0].name);\r\n  };\r\n\r\n  // Toggle tab (LEFT PANEL)\r\n  const toggleTab = (tab) => {\r\n    if (checkName !== editName || checkDesc !== editDescription) {\r\n      setModalSave(!modalSave);\r\n    } else {\r\n      if (activeTab !== tab) {\r\n        setActiveTab(tab);\r\n      }\r\n      setChangePage(false);\r\n      setChekedItems([]);\r\n      setSelectedPage(1);\r\n      onGetPlaylist({ id: defaultChannel?.id, count: 0 });\r\n      onGetVideos({ id: defaultChannel?.id, count: 0 });\r\n    }\r\n  };\r\n\r\n  // Drag playlist or videos\r\n  function handleOnDragEnd(result, items) {\r\n    if (!result.destination) return;\r\n\r\n    const getItems = Array.from(items);\r\n    const [reorderedItem] = getItems.splice(result.source.index, 1);\r\n    getItems.splice(result.destination.index, 0, reorderedItem);\r\n    const currentItem = getItems[result.destination.index];\r\n\r\n    setLoader(true);\r\n\r\n    if(activeTab === \"1\") {\r\n      onUpdatePlaylist({\r\n        id: currentItem.id,\r\n        name: currentItem.name,\r\n        description: currentItem.description,\r\n        orderby: (getItems[result.destination.index + 1].orderby - 1)\r\n      });\r\n      setTimeout(() => {\r\n        onGetPlaylist({ id: defaultChannel.id, count: 0 });\r\n      }, 1000);\r\n      updateCharacters(null);\r\n    } else {\r\n      onChangeVideoOrder({\r\n        playlist_id: currentItem.playlist_id,\r\n        video_id: currentItem.id,\r\n        orderby: (getItems[result.destination.index + 1].orderby - 1)\r\n      });\r\n      setTimeout(() => {\r\n        onGetVideosByPlaylist({\r\n          id: getPlaylist?.id,\r\n          channel: defaultChannel?.id,\r\n          count: 0,\r\n        });\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  // Set & remove checkmark\r\n  const handleChange = (p, checkItems, setCheckItems) => {\r\n    const clickedCategory = checkItems.indexOf(p.id);\r\n    const all = [...checkItems];\r\n\r\n    if (clickedCategory === -1) {\r\n      all.push(p.id);\r\n    } else {\r\n      all.splice(clickedCategory, 1);\r\n    }\r\n    setCheckItems(all);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (defaultChannel !== activeChannel) {\r\n      setChekedItems([]);\r\n    }\r\n  }, [activeChannel]);\r\n\r\n  useEffect(() => {\r\n    if (playlists === null) {\r\n      onGetPlaylist({ id: defaultChannel?.id || \"1\", count: 0 });\r\n    }\r\n    if (videos === null) {\r\n      onGetVideos({ id: defaultChannel?.id, count: 0 });\r\n    }\r\n\r\n    if (\r\n      characters === null ||\r\n      playlists?.length !== characters?.length ||\r\n      checkName == editName\r\n    ) {\r\n      updateCharacters(playlists);\r\n    }\r\n    if (getPlaylist !== null) {\r\n      if (\r\n        dragVIdeo === null ||\r\n        videosByPlaylist?.length !== dragVIdeo?.length ||\r\n        checkName == editName\r\n      ) {\r\n        updateDragVideo(videosByPlaylist);\r\n      }\r\n    } else {\r\n      if (dragVIdeo === null || videos?.length !== dragVIdeo?.length) {\r\n        updateDragVideo(videos);\r\n      }\r\n    }\r\n  }, [playlists, videosByPlaylist, videos, getPlaylist]);\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"page-content\">\r\n        <Container fluid>\r\n          <Breadcrumbs title={\"Dashboard\"} breadcrumbItem={\"content\"} />\r\n          <Row className=\"align-items-start\">\r\n            {/* LEFT PANEL */}\r\n            <Col xs=\"12\" sm=\"5\" md=\"4\" lg=\"3\">\r\n              <Card>\r\n                <CardBody>\r\n                  <TabButton\r\n                    {...{\r\n                      activeTab,\r\n                      toggleTab,\r\n                      characters,\r\n                      dragVIdeo,\r\n                      countPlaylists,\r\n                      countVideos,\r\n                    }}\r\n                  />\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n            {/* RIGHT PANEL */}\r\n            <Col xs=\"12\" sm=\"7\" md=\"8\" lg=\"9\">\r\n              <TabContent activeTab={activeTab}>\r\n                <TabPane tabId=\"1\">\r\n                  <TabPanel\r\n                    {...{\r\n                      characters,\r\n                      dragVIdeo,\r\n                      updateDragVideo,\r\n                      checkedItems,\r\n                      checkName,\r\n                      setCheckName,\r\n                      setCheckDesc,\r\n                      setChekedItems,\r\n                      handleOnDragEnd,\r\n                      handleChange,\r\n                      videosByPlaylist,\r\n                      changePage,\r\n                      setChangePage,\r\n                      editName,\r\n                      editDescription,\r\n                      setEditName,\r\n                      setEditDescription,\r\n                      valueButton,\r\n                      onUpdateVideo,\r\n                      onAddVideoToPlaylist,\r\n                      onGetVideosByPlaylist,\r\n                      getPlaylist,\r\n                      setGetPlaylist,\r\n                      onRemoveVideoFromPlaylist,\r\n                      onGetVideos,\r\n                      videos,\r\n                      modalSave,\r\n                      setModalSave,\r\n                      updateCharacters,\r\n                      item,\r\n                      modalDelete,\r\n                      toggleDelete,\r\n                      onPlaylistDelete,\r\n                      activeChannel,\r\n                      onAddPlaylist,\r\n                      onGetPlaylist,\r\n                      onUpdatePlaylist,\r\n                      activeTab,\r\n                      toForm,\r\n                      defaultChannel,\r\n                      playlists,\r\n                      countVideos,\r\n                      countPlaylists,\r\n                      selectedPage,\r\n                      setSelectedPage,\r\n                      toEdit,\r\n                      setActiveTab,\r\n                      countVideosByPlaylist,\r\n                      checkId,\r\n                      loader,\r\n                      setLoader,\r\n                      channelLanguages,\r\n                      onGetChannelLanguages,\r\n                      languagesAll,\r\n                      getLanguages,\r\n                      metaTitle,\r\n                      setMetaTitle,\r\n                      metaKeyword,\r\n                      setMetaKeyword,\r\n                      metaDesc,\r\n                      setMetaDesc,\r\n                      onGetOnePlaylist,\r\n                      onePlayist,\r\n                      oneVideo,\r\n                      onGetOneVideo,\r\n                      onChangeVideoOrder,\r\n                      playlistsByVideo\r\n                    }}\r\n                  />\r\n                </TabPane>\r\n                <TabPane tabId=\"2\">\r\n                  <TabPanel\r\n                    {...{\r\n                      characters,\r\n                      dragVIdeo,\r\n                      updateDragVideo,\r\n                      checkedItems,\r\n                      checkName,\r\n                      setCheckName,\r\n                      setCheckDesc,\r\n                      setChekedItems,\r\n                      handleOnDragEnd,\r\n                      handleChange,\r\n                      videosByPlaylist,\r\n                      changePage,\r\n                      setChangePage,\r\n                      editName,\r\n                      editDescription,\r\n                      setEditName,\r\n                      setEditDescription,\r\n                      valueButton,\r\n                      onUpdateVideo,\r\n                      onAddVideoToPlaylist,\r\n                      onGetVideosByPlaylist,\r\n                      getPlaylist,\r\n                      setGetPlaylist,\r\n                      onRemoveVideoFromPlaylist,\r\n                      onGetVideos,\r\n                      videos,\r\n                      modalSave,\r\n                      setModalSave,\r\n                      updateCharacters,\r\n                      item,\r\n                      modalDelete,\r\n                      toggleDelete,\r\n                      onPlaylistDelete,\r\n                      activeChannel,\r\n                      onAddPlaylist,\r\n                      onGetPlaylist,\r\n                      onUpdatePlaylist,\r\n                      activeTab,\r\n                      toForm,\r\n                      defaultChannel,\r\n                      playlists,\r\n                      countVideos,\r\n                      countPlaylists,\r\n                      selectedPage,\r\n                      setSelectedPage,\r\n                      toEdit,\r\n                      setActiveTab,\r\n                      countVideosByPlaylist,\r\n                      checkId,\r\n                      loader,\r\n                      setLoader,\r\n                      channelLanguages,\r\n                      onGetChannelLanguages,\r\n                      languagesAll,\r\n                      getLanguages,\r\n                      metaTitle,\r\n                      setMetaTitle,\r\n                      metaKeyword,\r\n                      setMetaKeyword,\r\n                      metaDesc,\r\n                      setMetaDesc,\r\n                      onGetOnePlaylist,\r\n                      onePlayist,\r\n                      oneVideo,\r\n                      onGetOneVideo,\r\n                      onChangeVideoOrder,\r\n                      playlistsByVideo\r\n                    }}\r\n                  />\r\n                </TabPane>\r\n                <TabPane tabId=\"3\">\r\n                  <Card>\r\n                    <Upload />\r\n                  </Card>\r\n                </TabPane>\r\n              </TabContent>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n// Get redux state values\r\nconst mapStatetoProps = (state) => ({\r\n  activeChannel: selectors.channels.activeChannel(state),\r\n\r\n  channelLanguages: selectors.languages.channelLanguages(state),\r\n  languagesAll: selectors.languages.languagesAll(state),\r\n\r\n  playlists: selectors.playlists.playlists(state),\r\n  onePlayist: selectors.playlists.onePlaylist(state),\r\n  countPlaylists: selectors.playlists.count(state),\r\n  playlistsByVideo: selectors.playlists.playlistsByVideo(state),\r\n\r\n  videos: selectors.videos.videos(state),\r\n  videosByPlaylist: selectors.videos.videosByPlaylist(state),\r\n  countVideos: selectors.videos.countVideos(state),\r\n  countVideosByPlaylist: selectors.videos.countVideosByPlaylist(state),\r\n  oneVideo: selectors.videos.oneVideo(state),\r\n\r\n  loader: selectors.common.loader(state),\r\n});\r\n\r\n// Get redux state function\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onAddPlaylist: (data) => dispatch(Actions.playlists.addPlaylistRequest(data)),\r\n  onPlaylistDelete: (data) =>\r\n    dispatch(Actions.playlists.deletePlaylistRequest(data)),\r\n  onUpdatePlaylist: (data) =>\r\n    dispatch(Actions.playlists.updatePlaylistRequest(data)),\r\n  onGetPlaylist: (data) =>\r\n    dispatch(Actions.playlists.getPlaylistsRequest(data)),\r\n  onGetOnePlaylist: (data) =>\r\n    dispatch(Actions.playlists.getOnePlaylistRequest(data)),\r\n  onGetPlaylistsByVideo: (data) => dispatch(Actions.playlists.getPlaylistsByVideoRequest(data)),\r\n\r\n  onUpdateVideo: (data) => dispatch(Actions.videos.updateVideoRequest(data)),\r\n  onAddVideoToPlaylist: (data) =>\r\n    dispatch(Actions.videos.addVideoToPlaylistRequest(data)),\r\n  onGetVideosByPlaylist: (data) =>\r\n    dispatch(Actions.videos.getVideoByPlaylistRequest(data)),\r\n  onRemoveVideoFromPlaylist: (data) =>\r\n    dispatch(Actions.videos.removeVideoFromPlaylistRequest(data)),\r\n  onGetVideos: (data) => dispatch(Actions.videos.getVideosRequest(data)),\r\n  onGetOneVideo: (data) => dispatch(Actions.videos.getOneVideoRequest(data)),\r\n  onChangeVideoOrder: (data) => dispatch(Actions.videos.changeVideoOrderRequest(data)),\r\n\r\n  onGetChannelLanguages: (data) =>\r\n    dispatch(Actions.languages.getChannelLanguagesRequest(data)),\r\n  getLanguages: () => dispatch(Actions.languages.getLanguagesRequest()),\r\n\r\n  setLoader: (data) => dispatch(Actions.common.setLoader(data)),\r\n});\r\n\r\nexport default connect(\r\n  mapStatetoProps,\r\n  mapDispatchToProps\r\n)(withNamespaces()(Content));\r\n","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\TabPanel\\TabPanel.jsx",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\TabPanel\\Upload\\Upload.jsx",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\TabPanel\\ButtonsAPI\\ButtonsAPIVideo.jsx",["427","428"],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  ButtonDropdown,\r\n  DropdownToggle,\r\n  DropdownItem,\r\n  DropdownMenu,\r\n} from \"reactstrap\";\r\n\r\nconst ButtonsAPIVideo = (props) => {\r\n  const {\r\n    getPlaylist,\r\n    setGetPlaylist,\r\n    onGetVideos,\r\n    setChekedItems,\r\n    characters,\r\n    toggleDelete,\r\n    onGetVideosByPlaylist,\r\n    dragVIdeo,\r\n    toForm,\r\n    checkedItems,\r\n    setSelectedPage,\r\n    updateDragVideo,\r\n    videos,\r\n    defaultChannel,\r\n    setLoader\r\n  } = props;\r\n\r\n  const [dropdownOpen, setOpen] = useState(false);\r\n\r\n  const toggle = () => setOpen(!dropdownOpen);\r\n\r\n  return (\r\n    <div className=\"btn-toolbar py-3\" role=\"toolbar\">\r\n      <ButtonDropdown isOpen={dropdownOpen} toggle={toggle} direction=\"down\">\r\n        <DropdownToggle\r\n          caret\r\n          color=\"secondary mr-2\"\r\n          className=\"btn btn-primary waves-light waves-effect\"\r\n        >\r\n          {getPlaylist?.name || \"All playlists\"}\r\n          <span className=\"arrow-down\" />\r\n        </DropdownToggle>\r\n        <DropdownMenu className=\"scrollable-menu\">\r\n          <DropdownItem\r\n            onClick={() => {\r\n              setGetPlaylist(null);\r\n              onGetVideos({ id: defaultChannel?.id, count: 0 });\r\n              setSelectedPage(1);\r\n              setChekedItems([]);\r\n              updateDragVideo(videos);\r\n            }}\r\n          >\r\n            All playlists\r\n          </DropdownItem>\r\n          {characters?.map((c) => {\r\n            return (\r\n              <DropdownItem\r\n                key={c.id}\r\n                onClick={() => {\r\n                  onGetVideosByPlaylist({\r\n                    id: c.id,\r\n                    channel: defaultChannel?.id,\r\n                    count: 0,\r\n                    video_id: 115516575\r\n                  });\r\n                  setGetPlaylist(c);\r\n                  setChekedItems([]);\r\n                  setSelectedPage(1);\r\n                  setLoader(true)\r\n                }}\r\n              >\r\n                {c.name}\r\n              </DropdownItem>\r\n            );\r\n          })}\r\n        </DropdownMenu>\r\n      </ButtonDropdown>\r\n      {dragVIdeo?.length === 0 || dragVIdeo === null ? null : (\r\n        <>\r\n          <Button\r\n            color=\"primary mr-2\"\r\n            className=\"btn btn-primary waves-light waves-effect\"\r\n            value=\"editVideo\"\r\n            onClick={toForm}\r\n            disabled={checkedItems.length === 0 || checkedItems.length > 1}\r\n          >\r\n            Edit <i className=\"mdi mdi-dots-vertical ml-2 dots\"></i>\r\n          </Button>\r\n          <Button\r\n            color=\"primary mr-2\"\r\n            className=\"btn btn-primary waves-light waves-effect\"\r\n            value=\"newVideo\"\r\n            onClick={toForm}\r\n            disabled={checkedItems.length === 0 || checkedItems.length > 1}\r\n          >\r\n            <i className=\"dripicons-folder mr-1\"></i> Add to playlist\r\n          </Button>\r\n          <Button\r\n            type=\"button\"\r\n            color=\"primary\"\r\n            className=\"btn btn-primary waves-light waves-effect\"\r\n            onClick={toggleDelete}\r\n            disabled={checkedItems.length === 0}\r\n          >\r\n            {\" \"}\r\n            Delete<i className=\"far fa-trash-alt ml-2\"></i>\r\n          </Button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ButtonsAPIVideo;\r\n","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\TabPanel\\ButtonsAPI\\ButtonsAPIPlaylist.jsx",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\TabPanel\\EmptyMessage\\EmptyMessage.jsx",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\TabPanel\\DeleteModal\\DeleteModal.jsx",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\TabPanel\\CreateEdit\\CreateEdit.jsx",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\TabPanel\\CheckItems\\CheckItems.jsx",["429","430","431","432","433"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Form, Label, Input } from \"reactstrap\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport Loader from \"../../../../helpers/loader\";\r\n\r\nconst CheckItems = (props) => {\r\n  const {\r\n    updateItems,\r\n    items,\r\n    checkedItems,\r\n    setChekedItems,\r\n    handleOnDragEnd,\r\n    handleChange,\r\n    toEdit,\r\n    onGetVideosByPlaylist,\r\n    getPlaylist,\r\n    defaultChannel,\r\n    loader,\r\n    setLoader,\r\n    onGetOnePlaylist,\r\n    onGetOneVideo,\r\n    activeTab,\r\n    onChangeVideoOrder,\r\n    onUpdatePlaylist,\r\n    onGetPlaylist,\r\n    characters\r\n  } = props;\r\n\r\n  const [orderByValue, setOrderByValue] = useState(0);\r\n  const [videoId, setVideoId] = useState(0);\r\n  const [playlistId, setPlaylistId] = useState(0);\r\n\r\n  let allItems = [];\r\n  for (let str of items) {\r\n    if (!allItems.includes(str)) {\r\n      allItems.push(str);\r\n    }\r\n  }\r\n\r\n  // set input data when changed\r\n  const onOrderbyClick = (orderByValue, e) => {\r\n    setOrderByValue(Number(orderByValue));\r\n    if (activeTab === \"1\") {\r\n      setPlaylistId(e);\r\n    } else {\r\n      setVideoId(e.id);\r\n      setPlaylistId(e.playlist_id || 1);\r\n    }\r\n  };\r\n\r\n  // Sort items by property\r\n  function dynamicSort(property) {\r\n    const sortOrder = 1;\r\n    if (property[0] === \"-\") {\r\n      sortOrder = -1;\r\n      property = property.substr(1);\r\n    }\r\n    return function (a, b) {\r\n      const result =\r\n        a[property] < b[property] ? -1 : a[property] > b[property] ? 1 : 0;\r\n      return result * sortOrder;\r\n    };\r\n  }\r\n\r\n  const sortedItems =\r\n    activeTab === \"1\"\r\n      ? items.filter((i) => i.active === 1).sort(dynamicSort(\"orderby\"))\r\n      : items.sort(dynamicSort(\"orderby\"));\r\n\r\n  // save order number by Enter press\r\n  const onEnterPress = (event) => {\r\n    if (event.keyCode == 13) {\r\n      if(activeTab === \"1\") {\r\n        onUpdatePlaylist({\r\n          id: playlistId.id,\r\n          name: playlistId.name,\r\n          description: playlistId.description,\r\n          orderby: orderByValue\r\n        });\r\n        setTimeout(() => {\r\n          onGetPlaylist({ id: defaultChannel.id, count: 0 });\r\n        }, 1000);\r\n        updateItems(null);\r\n      } else {\r\n        onChangeVideoOrder({\r\n          playlist_id: playlistId,\r\n          video_id: videoId,\r\n          orderby: orderByValue,\r\n        });\r\n        setTimeout(() => {\r\n          onGetVideosByPlaylist({\r\n            id: getPlaylist?.id,\r\n            channel: defaultChannel?.id,\r\n            count: 0,\r\n            // video_id: null\r\n          });\r\n        }, 1000);\r\n      }\r\n      // event.target.blur();\r\n        setLoader(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (sortedItems.length !== 0) {\r\n      setLoader(false);\r\n    }\r\n  }, [sortedItems]);\r\n\r\n  return (\r\n    <>\r\n      {loader ? (\r\n        <Loader />\r\n      ) : (\r\n        <Form>\r\n          <DragDropContext\r\n            onDragEnd={(e) => handleOnDragEnd(e, sortedItems)}\r\n          >\r\n            <Droppable droppableId=\"characters\">\r\n              {(provided) => (\r\n                <ul\r\n                  className=\"message-list characters\"\r\n                  {...provided.droppableProps}\r\n                  ref={provided.innerRef}\r\n                >\r\n                  { sortedItems &&\r\n                    sortedItems?.map((p, index) => {\r\n                      const element = Number(p.duration || 0);\r\n                      let hours = Math.floor(element / 3600);\r\n                      let minutes = Math.floor((element % 3600) / 60);\r\n\r\n                      if (hours < 10) {\r\n                        hours = `0${hours}`;\r\n                      }\r\n\r\n                      if (minutes < 10) {\r\n                        minutes = `0${minutes}`;\r\n                      }\r\n                      return (\r\n                        <Draggable\r\n                          key={p.id}\r\n                          draggableId={String(p.name)}\r\n                          index={index}\r\n                        >\r\n                          {(provided) => (\r\n                            <li\r\n                              ref={provided.innerRef}\r\n                              {...provided.draggableProps}\r\n                              {...provided.dragHandleProps}\r\n                            >\r\n                              <Label className=\"check d-flex align-items-center ml-4\">\r\n                                <Input\r\n                                  type=\"checkbox\"\r\n                                  name={p.name}\r\n                                  checked={checkedItems.includes(p.id)}\r\n                                  onChange={() =>\r\n                                    handleChange(\r\n                                      p,\r\n                                      checkedItems,\r\n                                      setChekedItems\r\n                                    )\r\n                                  }\r\n                                />\r\n\r\n                                {getPlaylist !== null || activeTab === \"1\" ? (\r\n                                  <input\r\n                                    style={{ fontSize: \"10px\", width: \"38px\" }}\r\n                                    className=\"videosOrderNumber\"\r\n                                    type=\"text\"\r\n                                    checked={checkedItems.includes(p.id)}\r\n                                    defaultValue={p.orderby}\r\n                                    // value={orderByValue}\r\n                                    onChange={(event) =>\r\n                                      onOrderbyClick(event.target.value, p)\r\n                                    }\r\n                                    onKeyDown={(event) => onEnterPress(event)}\r\n                                  />\r\n                                ) : null}\r\n\r\n                                {activeTab === \"1\" ? (\r\n                                  <>\r\n                                    {\" \"}\r\n                                    <span\r\n                                      id=\"editPlaylist\"\r\n                                      onClick={(e) => {\r\n                                        onGetOnePlaylist({ id: p.id });\r\n                                        toEdit(p, e.currentTarget.id, \"en\");\r\n                                      }}\r\n                                    >\r\n                                      {p.name}{\" \"}\r\n                                    </span>\r\n                                  </>\r\n                                ) : (\r\n                                  <>\r\n                                    {\" \"}\r\n                                    <img\r\n                                      src={JSON.parse(p.pictures)[\"100\"]}\r\n                                      className=\"picture\"\r\n                                      alt=\"img\"\r\n                                    />\r\n                                    <span\r\n                                      id=\"editVideo\"\r\n                                      onClick={(e) => {\r\n                                        onGetOneVideo({ id: p.id });\r\n                                        toEdit(p, e.currentTarget.id, \"en\");\r\n                                      }}\r\n                                    >\r\n                                      {p.name}{\" \"}\r\n                                    </span>\r\n                                  </>\r\n                                )}\r\n                                <div className=\"col-mail col-mail-2\">\r\n                                  <div className=\"date\">\r\n                                    {activeTab === \"1\" ? (\r\n                                      `${p?.videos_count} items`\r\n                                    ) : (\r\n                                      <>{`${hours}:${minutes}`}</>\r\n                                    )}\r\n                                  </div>\r\n                                </div>\r\n                              </Label>\r\n                            </li>\r\n                          )}\r\n                        </Draggable>\r\n                      );\r\n                    })}\r\n                  {provided.placeholder}\r\n                </ul>\r\n              )}\r\n            </Droppable>\r\n          </DragDropContext>\r\n        </Form>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CheckItems;\r\n","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\TabPanel\\Pagination\\Pagination.jsx",["434"],"import React, { useEffect } from \"react\";\r\nimport PaginationComponent from \"react-reactstrap-pagination\";\r\n\r\nconst PaginationVideos = (props) => {\r\n  const {\r\n    countVideos,\r\n    onGetVideos,\r\n    updateDragVideo,\r\n    videos,\r\n    selectedPage,\r\n    setSelectedPage,\r\n    defaultChannel,\r\n    onGetPlaylist,\r\n    countPlaylists,\r\n    activeTab,\r\n    getPlaylist,\r\n    onGetVideosByPlaylist,\r\n    countVideosByPlaylist,\r\n    videosByPlaylist,\r\n    setLoader\r\n  } = props;\r\n\r\n  const handleSelected = (page) => {\r\n    if(activeTab === \"1\") {\r\n      onGetPlaylist( {id: defaultChannel?.id, count: ((page - 1) * 25)});\r\n      setSelectedPage(page);\r\n    } else {\r\n      if(getPlaylist === null) {\r\n        onGetVideos( {id: defaultChannel?.id, count: ((page - 1) * 25)});\r\n        setSelectedPage(page);\r\n      } else {\r\n        onGetVideosByPlaylist( {id: getPlaylist?.id, channel: defaultChannel?.id, count: ((page - 1) * 25)});\r\n        setSelectedPage(page);\r\n      }\r\n    }\r\n    setLoader(true)\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectedPage) {\r\n      if(getPlaylist === null) {\r\n        updateDragVideo(videos);\r\n      } else {\r\n        updateDragVideo(videosByPlaylist)\r\n      }\r\n    }\r\n  }, [selectedPage, videos]);\r\n\r\n  return (\r\n    <div className=\"d-flex justify-content-center\">\r\n      <PaginationComponent\r\n        totalItems={activeTab === \"1\" ? countPlaylists : getPlaylist === null ? countVideos : countVideosByPlaylist}\r\n        pageSize={25}\r\n        onSelect={handleSelected}\r\n        defaultActivePage={selectedPage}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PaginationVideos;","F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\TabPanel\\CreateEdit\\FormaData\\FormaData.jsx",["435","436","437","438","439"],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\TabPanel\\CreateEdit\\MetaForma\\MetaForma.jsx",[],"F:\\Програмування\\working\\bringstream\\channel-admin-test\\src\\pages\\Content\\TabPanel\\CreateEdit\\LanguagesTabs\\LanguagesTabs.jsx",["440","441","442","443","444","445","446","447"],"import React, { useState, useEffect } from \"react\";\r\nimport classnames from \"classnames\";\r\nimport { TabContent, TabPane, Nav, NavItem, NavLink } from \"reactstrap\";\r\n\r\nconst LanguagesTabs = (props) => {\r\n  const {\r\n    languagesAll,\r\n    channelLanguages,\r\n    onePlayist,\r\n    setDescLang,\r\n    descLang,\r\n    editName,\r\n    editDescription,\r\n    metaTitle,\r\n    metaKeyword,\r\n    metaDesc,\r\n    onChangeForma,\r\n    valueButton,\r\n    oneVideo,\r\n  } = props;\r\n  const [langs, setLangs] = useState([]);\r\n  const [activeTab, setActiveTab] = useState(null);\r\n  const [currLang, setCurrLang] = useState(\"en\");\r\n\r\n  // On toggle languages\r\n  const toggleCustomJustified = (tab, title) => {\r\n    if (activeTab !== tab) {\r\n      setActiveTab(tab);\r\n      onChangeForma(descLang[title]);\r\n      setCurrLang(title);\r\n    }\r\n  };\r\n  // Keep track change on forma\r\n  useEffect(() => {\r\n    if (Object.keys(descLang).length !== 0) {\r\n      if (metaDesc || editName || editDescription || metaTitle || metaKeyword) {\r\n        const arr = descLang;\r\n        arr[currLang] = {\r\n          description: editDescription,\r\n          name: editName,\r\n          seo_description: metaDesc,\r\n          seo_keyword: metaKeyword,\r\n          seo_title: metaTitle,\r\n        };\r\n        setDescLang(arr);\r\n      }\r\n    }\r\n  }, [metaDesc, editName, editDescription, metaTitle, metaKeyword, descLang]);\r\n\r\n  // Set selected languages\r\n  useEffect(() => {\r\n    languagesAll && setLangs(languagesAll);\r\n  }, [languagesAll]);\r\n  // Set active lang\r\n  useEffect(() => {\r\n    if(languagesAll !== null && channelLanguages !== null) {\r\n      setActiveTab(\"17\");\r\n    }\r\n  }, [languagesAll, channelLanguages])\r\n  // Set initial values for all languages on form\r\n  useEffect(() => {\r\n    if (Object.keys(descLang).length === 0) {\r\n      const arr = descLang;\r\n      if (\r\n        channelLanguages !== null &&\r\n        onePlayist !== null ||\r\n        oneVideo !== null\r\n      ) {\r\n        for (let key in channelLanguages) {\r\n          if (channelLanguages[key] === 1) {\r\n            if (\r\n              onePlayist?.name === editName || \"\" === editName &&\r\n              valueButton === \"editPlaylist\"\r\n            ) {\r\n              if (\r\n                onePlayist?.description.includes(`${key}\":`)) {\r\n                arr[key] = JSON.parse(onePlayist.description)[key];\r\n              } else {\r\n                arr[key] = {\r\n                  description: \"\",\r\n                  name: \"\",\r\n                  seo_description: \"\",\r\n                  seo_keyword: \"\",\r\n                  seo_title: \"\",\r\n                };\r\n              }\r\n            } else if (valueButton === \"newPlaylist\") {\r\n              arr[key] = {\r\n                description: \"\",\r\n                name: \"\",\r\n                seo_description: \"\",\r\n                seo_keyword: \"\",\r\n                seo_title: \"\",\r\n              };\r\n            } else if (\r\n              (oneVideo?.name === editName || \"\" === editName &&\r\n                valueButton === \"editVideo\") ||\r\n              valueButton === \"newVideo\"\r\n            ) {\r\n              if (\r\n                oneVideo?.description.includes(`${key}\":`)\r\n              ) {\r\n                arr[key] = JSON.parse(oneVideo.description)[key];\r\n              } else {\r\n                arr[key] = {\r\n                  description: \"\",\r\n                  name: \"\",\r\n                  seo_description: \"\",\r\n                  seo_keyword: \"\",\r\n                  seo_title: \"\",\r\n                };\r\n              }\r\n            }\r\n          }\r\n        }\r\n        setDescLang(arr);\r\n      }\r\n    }\r\n  }, [channelLanguages, onePlayist, descLang, oneVideo, editName]);\r\n\r\n  return (\r\n    <TabContent>\r\n      <TabPane>\r\n        <Nav tabs className=\"nav-tabs-custom nav-justified\">\r\n          {langs?.map((item, index) => {\r\n            const num = index + 1;\r\n            return (\r\n              <>\r\n                {channelLanguages && channelLanguages[item.id] === 1 ? (\r\n                  <NavItem key={index}>\r\n                    <NavLink\r\n                      style={{ cursor: \"pointer\" }}\r\n                      className={classnames({\r\n                        active: activeTab === num.toString(),\r\n                      })}\r\n                      onClick={() => {\r\n                        toggleCustomJustified(num.toString(), item.id);\r\n                      }}\r\n                    >\r\n                      <span className=\"d-none d-sm-block\">{item.name}</span>\r\n                    </NavLink>\r\n                  </NavItem>\r\n                ) : null}\r\n              </>\r\n            );\r\n          })}\r\n        </Nav>\r\n        {/* Buttons fot toggle */}\r\n        <TabContent activeTab={activeTab}>\r\n          {langs?.map((item, index) => {\r\n            return (\r\n              <TabPane key={index} tabId={index + 1} className=\"p-3\"></TabPane>\r\n            );\r\n          })}\r\n        </TabContent>\r\n      </TabPane>\r\n    </TabContent>\r\n  );\r\n};\r\n\r\nexport default LanguagesTabs;\r\n",{"ruleId":"448","replacedBy":"449"},{"ruleId":"450","replacedBy":"451"},{"ruleId":"452","severity":1,"message":"453","line":56,"column":5,"nodeType":"454","endLine":56,"endColumn":15,"suggestions":"455"},{"ruleId":"456","severity":1,"message":"457","line":11,"column":1,"nodeType":"458","endLine":19,"endColumn":2},{"ruleId":"452","severity":1,"message":"459","line":28,"column":6,"nodeType":"454","endLine":28,"endColumn":36,"suggestions":"460"},{"ruleId":"461","severity":1,"message":"462","line":39,"column":5,"nodeType":"463","messageId":"464","endLine":39,"endColumn":17},{"ruleId":"452","severity":1,"message":"465","line":32,"column":5,"nodeType":"454","endLine":32,"endColumn":46,"suggestions":"466"},{"ruleId":"456","severity":1,"message":"457","line":24,"column":1,"nodeType":"458","endLine":28,"endColumn":2},{"ruleId":"456","severity":1,"message":"457","line":81,"column":1,"nodeType":"458","endLine":94,"endColumn":2},{"ruleId":"456","severity":1,"message":"457","line":51,"column":1,"nodeType":"458","endLine":59,"endColumn":2},{"ruleId":"456","severity":1,"message":"457","line":29,"column":1,"nodeType":"458","endLine":34,"endColumn":2},{"ruleId":"456","severity":1,"message":"457","line":68,"column":1,"nodeType":"458","endLine":79,"endColumn":3},{"ruleId":"456","severity":1,"message":"457","line":75,"column":1,"nodeType":"458","endLine":87,"endColumn":3},{"ruleId":"456","severity":1,"message":"457","line":40,"column":1,"nodeType":"458","endLine":47,"endColumn":3},{"ruleId":"456","severity":1,"message":"457","line":9,"column":1,"nodeType":"458","endLine":17,"endColumn":2},{"ruleId":"461","severity":1,"message":"467","line":8,"column":78,"nodeType":"463","messageId":"464","endLine":8,"endColumn":85},{"ruleId":"468","severity":1,"message":"469","line":22,"column":15,"nodeType":"470","endLine":24,"endColumn":18},{"ruleId":"461","severity":1,"message":"471","line":16,"column":8,"nodeType":"463","messageId":"464","endLine":16,"endColumn":17},{"ruleId":"452","severity":1,"message":"472","line":58,"column":6,"nodeType":"454","endLine":58,"endColumn":47,"suggestions":"473"},{"ruleId":"452","severity":1,"message":"474","line":81,"column":6,"nodeType":"454","endLine":81,"endColumn":40,"suggestions":"475"},{"ruleId":"456","severity":1,"message":"457","line":7,"column":1,"nodeType":"458","endLine":9,"endColumn":2},{"ruleId":"456","severity":1,"message":"457","line":7,"column":1,"nodeType":"458","endLine":9,"endColumn":2},{"ruleId":"456","severity":1,"message":"457","line":15,"column":1,"nodeType":"458","endLine":19,"endColumn":2},{"ruleId":"456","severity":1,"message":"457","line":8,"column":1,"nodeType":"458","endLine":11,"endColumn":3},{"ruleId":"456","severity":1,"message":"457","line":14,"column":1,"nodeType":"458","endLine":20,"endColumn":3},{"ruleId":"456","severity":1,"message":"457","line":10,"column":1,"nodeType":"458","endLine":15,"endColumn":3},{"ruleId":"456","severity":1,"message":"457","line":9,"column":1,"nodeType":"458","endLine":13,"endColumn":2},{"ruleId":"452","severity":1,"message":"476","line":269,"column":6,"nodeType":"454","endLine":269,"endColumn":21,"suggestions":"477"},{"ruleId":"478","severity":1,"message":"479","line":282,"column":17,"nodeType":"480","messageId":"481","endLine":282,"endColumn":19},{"ruleId":"478","severity":1,"message":"479","line":290,"column":19,"nodeType":"480","messageId":"481","endLine":290,"endColumn":21},{"ruleId":"452","severity":1,"message":"482","line":299,"column":6,"nodeType":"454","endLine":299,"endColumn":56,"suggestions":"483"},{"ruleId":"461","severity":1,"message":"484","line":1,"column":27,"nodeType":"463","messageId":"464","endLine":1,"endColumn":33},{"ruleId":"461","severity":1,"message":"485","line":1,"column":35,"nodeType":"463","messageId":"464","endLine":1,"endColumn":44},{"ruleId":"461","severity":1,"message":"484","line":1,"column":38,"nodeType":"463","messageId":"464","endLine":1,"endColumn":44},{"ruleId":"461","severity":1,"message":"486","line":26,"column":5,"nodeType":"463","messageId":"464","endLine":26,"endColumn":15},{"ruleId":"487","severity":1,"message":"488","line":55,"column":7,"nodeType":"463","messageId":"489","endLine":55,"endColumn":16},{"ruleId":"478","severity":1,"message":"479","line":72,"column":23,"nodeType":"480","messageId":"481","endLine":72,"endColumn":25},{"ruleId":"452","severity":1,"message":"490","line":108,"column":6,"nodeType":"454","endLine":108,"endColumn":19,"suggestions":"491"},{"ruleId":"452","severity":1,"message":"492","line":47,"column":6,"nodeType":"454","endLine":47,"endColumn":28,"suggestions":"493"},{"ruleId":"461","severity":1,"message":"494","line":1,"column":17,"nodeType":"463","messageId":"464","endLine":1,"endColumn":25},{"ruleId":"461","severity":1,"message":"495","line":12,"column":5,"nodeType":"463","messageId":"464","endLine":12,"endColumn":18},{"ruleId":"461","severity":1,"message":"496","line":16,"column":5,"nodeType":"463","messageId":"464","endLine":16,"endColumn":16},{"ruleId":"468","severity":1,"message":"469","line":66,"column":11,"nodeType":"470","endLine":66,"endColumn":27},{"ruleId":"468","severity":1,"message":"469","line":78,"column":11,"nodeType":"470","endLine":78,"endColumn":27},{"ruleId":"452","severity":1,"message":"497","line":48,"column":6,"nodeType":"454","endLine":48,"endColumn":77,"suggestions":"498"},{"ruleId":"499","severity":1,"message":"500","line":65,"column":35,"nodeType":"501","messageId":"502","endLine":65,"endColumn":37},{"ruleId":"499","severity":1,"message":"500","line":66,"column":29,"nodeType":"501","messageId":"502","endLine":66,"endColumn":31},{"ruleId":"499","severity":1,"message":"503","line":72,"column":45,"nodeType":"501","messageId":"502","endLine":72,"endColumn":47},{"ruleId":"499","severity":1,"message":"503","line":72,"column":64,"nodeType":"501","messageId":"502","endLine":72,"endColumn":66},{"ruleId":"499","severity":1,"message":"503","line":96,"column":44,"nodeType":"501","messageId":"502","endLine":96,"endColumn":46},{"ruleId":"499","severity":1,"message":"503","line":96,"column":63,"nodeType":"501","messageId":"502","endLine":96,"endColumn":65},{"ruleId":"452","severity":1,"message":"504","line":119,"column":6,"nodeType":"454","endLine":119,"endColumn":66,"suggestions":"505"},"no-native-reassign",["506"],"no-negated-in-lhs",["507"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'lastLoactionPathname'. Either include them or remove the dependency array.","ArrayExpression",["508"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has missing dependencies: 'hash', 'isSent', and 'onSendNewPassword'. Either include them or remove the dependency array.",["509"],"no-unused-vars","'getLanguages' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'history' and 'resetIsChannelAddedValue'. Either include them or remove the dependency array.",["510"],"'history' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'selectors' is defined but never used.","React Hook useEffect has missing dependencies: 'getLanguages', 'onGetChannelLanguages', 'onGetChannels', and 'setActiveChannel'. Either include them or remove the dependency array.",["511"],"React Hook useEffect has missing dependencies: 'onGetChannelLanguages' and 'onUpdateChannelLanguages'. Either include them or remove the dependency array.",["512"],"React Hook useEffect has a missing dependency: 'defaultChannel'. Either include it or remove the dependency array.",["513"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'characters', 'checkName', 'defaultChannel?.id', 'dragVIdeo', 'editName', 'onGetPlaylist', and 'onGetVideos'. Either include them or remove the dependency array.",["514"],"'useRef' is defined but never used.","'useEffect' is defined but never used.","'characters' is assigned a value but never used.","no-const-assign","'sortOrder' is constant.","const","React Hook useEffect has a missing dependency: 'setLoader'. Either include it or remove the dependency array.",["515"],"React Hook useEffect has missing dependencies: 'getPlaylist', 'updateDragVideo', and 'videosByPlaylist'. Either include them or remove the dependency array.",["516"],"'useState' is defined but never used.","'setPlaylistId' is assigned a value but never used.","'getPlaylist' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currLang' and 'setDescLang'. Either include them or remove the dependency array.",["517"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.","React Hook useEffect has missing dependencies: 'setDescLang' and 'valueButton'. Either include them or remove the dependency array.",["518"],"no-global-assign","no-unsafe-negation",{"desc":"519","fix":"520"},{"desc":"521","fix":"522"},{"desc":"523","fix":"524"},{"desc":"525","fix":"526"},{"desc":"527","fix":"528"},{"desc":"529","fix":"530"},{"desc":"531","fix":"532"},{"desc":"533","fix":"534"},{"desc":"535","fix":"536"},{"desc":"537","fix":"538"},{"desc":"539","fix":"540"},"Update the dependencies array to be: [channels, history, lastLoactionPathname]",{"range":"541","text":"542"},"Update the dependencies array to be: [successMessage, errorMessage, hash, isSent, onSendNewPassword]",{"range":"543","text":"544"},"Update the dependencies array to be: [errorMessgae, history, isChannelAddedSuccessfuly, resetIsChannelAddedValue]",{"range":"545","text":"546"},"Update the dependencies array to be: [channels, activeChannel, defaultChannel, onGetChannels, onGetChannelLanguages, getLanguages, setActiveChannel]",{"range":"547","text":"548"},"Update the dependencies array to be: [channelLanguages, defaultChannel, onGetChannelLanguages, onUpdateChannelLanguages]",{"range":"549","text":"550"},"Update the dependencies array to be: [activeChannel, defaultChannel]",{"range":"551","text":"552"},"Update the dependencies array to be: [playlists, videosByPlaylist, videos, getPlaylist, characters, checkName, editName, onGetPlaylist, defaultChannel?.id, onGetVideos, dragVIdeo]",{"range":"553","text":"554"},"Update the dependencies array to be: [setLoader, sortedItems]",{"range":"555","text":"556"},"Update the dependencies array to be: [getPlaylist, selectedPage, updateDragVideo, videos, videosByPlaylist]",{"range":"557","text":"558"},"Update the dependencies array to be: [metaDesc, editName, editDescription, metaTitle, metaKeyword, descLang, currLang, setDescLang]",{"range":"559","text":"560"},"Update the dependencies array to be: [channelLanguages, onePlayist, descLang, oneVideo, editName, setDescLang, valueButton]",{"range":"561","text":"562"},[1809,1819],"[channels, history, lastLoactionPathname]",[1033,1063],"[successMessage, errorMessage, hash, isSent, onSendNewPassword]",[913,954],"[errorMessgae, history, isChannelAddedSuccessfuly, resetIsChannelAddedValue]",[1799,1840],"[channels, activeChannel, defaultChannel, onGetChannels, onGetChannelLanguages, getLanguages, setActiveChannel]",[2405,2439],"[channelLanguages, defaultChannel, onGetChannelLanguages, onUpdateChannelLanguages]",[8501,8516],"[activeChannel, defaultChannel]",[9287,9337],"[playlists, videosByPlaylist, videos, getPlaylist, characters, checkName, editName, onGetPlaylist, defaultChannel?.id, onGetVideos, dragVIdeo]",[2786,2799],"[setLoader, sortedItems]",[1202,1224],"[getPlaylist, selectedPage, updateDragVideo, videos, videosByPlaylist]",[1297,1368],"[metaDesc, editName, editDescription, metaTitle, metaKeyword, descLang, currLang, setDescLang]",[3584,3644],"[channelLanguages, onePlayist, descLang, oneVideo, editName, setDescLang, valueButton]"]